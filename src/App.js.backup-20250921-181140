import React, { useState, useEffect, useCallback, useRef } from 'react';
import { useAuth } from './contexts/AuthContext';
import { supabase, uploadPublicImage, toThumb, slugifySegment } from './lib/supabase';
import { graphUploadViaApi } from './lib/onedrive';
import { enqueueUpload, listUploads, removeUpload } from './lib/offline';
import { compressImage } from './lib/images';
import { 
  Camera, ArrowLeft, Calendar, FileText, Users, Plus,
  Moon, Sun, Upload,
  Zap, AlertCircle, QrCode,
  Folder, Image, X, ChevronRight, Edit2,
  Search, Eye, EyeOff,
  Package, Mail, FolderOpen,
  BarChart, Send, Save, ExternalLink, Maximize,
  ListTodo, CheckSquare, Square, Trash2,
  Phone, MapPin, ChevronDown
} from 'lucide-react';
import QRCode from 'qrcode';

const generateWireDropUid = () => {
  let raw = '';
  const hasWindow = typeof window !== 'undefined';
  if (hasWindow && window.crypto?.randomUUID) {
    raw = window.crypto.randomUUID();
  } else if (hasWindow && window.crypto?.getRandomValues) {
    const array = new Uint32Array(4);
    window.crypto.getRandomValues(array);
    raw = Array.from(array).map((v) => v.toString(16).padStart(8, '0')).join('');
  } else {
    raw = `${Date.now()}-${Math.random()}`;
  }
  raw = raw.replace(/[^a-zA-Z0-9]/g, '').toUpperCase();
  return `WD-${raw.slice(0, 12)}`;
};

const splitCsvLine = (line = '') => {
  const result = [];
  let current = '';
  let inQuotes = false;
  for (let i = 0; i < line.length; i++) {
    const char = line[i];
    if (char === '"') {
      if (inQuotes && line[i + 1] === '"') {
        current += '"';
        i++;
      } else {
        inQuotes = !inQuotes;
      }
    } else if (char === ',' && !inQuotes) {
      result.push(current.trim());
      current = '';
    } else {
      current += char;
    }
  }
  result.push(current.trim());
  return result;
};

const parseWireDropCsv = (text) => {
  const lines = (text || '')
    .split(/\r?\n/)
    .map(l => l.trim())
    .filter(Boolean);
  if (!lines.length) return [];
  const headers = splitCsvLine(lines[0]).map(h => h.toLowerCase());
  const rows = [];
  for (let i = 1; i < lines.length; i++) {
    const values = splitCsvLine(lines[i]);
    if (values.length === 1 && !values[0]) continue;
    const record = {};
    headers.forEach((header, idx) => {
      record[header] = values[idx] || '';
    });
    rows.push(record);
  }
  return rows;
};

const splitName = (fullName = '') => {
  const parts = String(fullName).trim().split(/\s+/).filter(Boolean);
  if (!parts.length) return { first: '', last: '' };
  if (parts.length === 1) return { first: parts[0], last: '' };
  return {
    first: parts[0],
    last: parts.slice(1).join(' ')
  };
};

const getDisplayName = (contact = {}) => {
  const first = contact.first_name?.trim();
  const last = contact.last_name?.trim();
  if (first || last) return [first, last].filter(Boolean).join(' ').trim();
  return (contact.name || '').trim() || (contact.email || '').trim() || 'Contact';
};

const getInitialContactForm = () => ({
  firstName: '',
  lastName: '',
  role: '',
  email: '',
  phone: '',
  address: '',
  company: '',
  report: false
});

const App = () => {
  const { user } = useAuth();
  const [darkMode, setDarkMode] = useState(true);
  const [currentView, setCurrentView] = useState('dashboard');
  const [userRole, setUserRole] = useState('technician'); // 'technician' or 'pm'
  const [selectedProject, setSelectedProject] = useState(null);
  const [selectedIssue, setSelectedIssue] = useState(null);
  const [selectedWireDrop, setSelectedWireDrop] = useState(null);
  const [showScanner, setShowScanner] = useState(false);
  const [showResolvedIssues, setShowResolvedIssues] = useState(false);
  const [expandedSections, setExpandedSections] = useState({});
  const [searchQuery, setSearchQuery] = useState('');
  const [viewMyProjects, setViewMyProjects] = useState(true);
  const [fullscreenImage, setFullscreenImage] = useState(null);
  const [pendingSection, setPendingSection] = useState(null);
  const selectedProjectId = selectedProject?.id;
  // Microsoft Calendar state
  const [events, setEvents] = useState([])
  const [eventsError, setEventsError] = useState('')
  const [calendarReady, setCalendarReady] = useState(false)

  const isoDayRange = () => {
    const start = new Date()
    start.setHours(0,0,0,0)
    const end = new Date()
    end.setHours(23,59,59,999)
    return { start: start.toISOString(), end: end.toISOString() }
  }

  const loadTodayEvents = useCallback(async () => {
    try {
      setEventsError('')
      const { data: sessionData } = await supabase.auth.getSession()
      const access = sessionData?.session?.provider_token
      if (!access) { setCalendarReady(false); return }
      setCalendarReady(true)
      const { start, end } = isoDayRange()
      const url = `https://graph.microsoft.com/v1.0/me/calendarView?startDateTime=${encodeURIComponent(start)}&endDateTime=${encodeURIComponent(end)}&$orderby=start/dateTime&$top=5`
      const tz = Intl.DateTimeFormat().resolvedOptions().timeZone || 'UTC'
      const resp = await fetch(url, {
        headers: { 
          Authorization: `Bearer ${access}`,
          'Prefer': `outlook.timezone="${tz}"`
        }
      })
      if (!resp.ok) {
        const text = await resp.text()
        setEventsError(text)
        return
      }
      const json = await resp.json()
      const mapped = (json.value || []).map(ev => ({
        id: ev.id,
        subject: ev.subject || 'Event',
        start: ev.start?.dateTime,
        end: ev.end?.dateTime,
        location: ev.location?.displayName || ''
      }))
      setEvents(mapped)
    } catch (e) {
      setEventsError(e.message)
    }
  }, [])

  useEffect(() => { loadTodayEvents() }, [loadTodayEvents])
  // Process any offline uploads when we come online
  useEffect(() => {
    const onOnline = async () => {
      try {
        const items = await listUploads()
        for (const it of items) {
          try {
            // Recreate a File from stored parts
            const file = new File([it.blob], it.filename, { type: it.contentType || 'image/jpeg' })
            const url = await graphUploadViaApi({ rootUrl: it.rootUrl, subPath: it.subPath, file })
            if (it.update?.type === 'wire_drop' && it.update?.field && it.update?.id) {
              await supabase.from('wire_drops').update({ [it.update.field]: url }).eq('id', it.update.id)
            } else if (it.update?.type === 'issue_photo' && it.update?.issueId) {
              await supabase.from('issue_photos').insert([{ issue_id: it.update.issueId, url }])
            }
            await removeUpload(it.id)
          } catch (_) {
            // keep for next round
          }
        }
      } catch (_) {}
    }
    window.addEventListener('online', onOnline)
    return () => window.removeEventListener('online', onOnline)
  }, [])
  
  // Time tracking state
  const [, setTimeLogs] = useState([]);
  const [activeCheckIns, setActiveCheckIns] = useState({});
  
  // Projects state (now loaded from Supabase)
  const [projects, setProjects] = useState([]);
  // Wire types lookup
  const [wireTypes, setWireTypes] = useState([]);
  const [stakeholderRoles, setStakeholderRoles] = useState([]);
  const [stakeholderDefaults, setStakeholderDefaults] = useState([]);
  const [projectStakeholders, setProjectStakeholders] = useState({});

  // Map DB row (snake_case) to UI shape (camelCase)
  const mapProject = useCallback((row) => ({
    id: row.id,
    name: row.name,
    client: row.client,
    address: row.address,
    phase: row.phase,
    startDate: row.start_date,
    endDate: row.end_date,
    assignedTechnician: row.assigned_technician || null,
    wiringDiagramUrl: row.wiring_diagram_url,
    portalProposalUrl: row.portal_proposal_url,
    oneDrivePhotos: row.one_drive_photos,
    oneDriveFiles: row.one_drive_files,
    oneDriveProcurement: row.one_drive_procurement,
    wireDrops: [],
    todos: []
  }), []);

  const loadWireTypes = async () => {
    try {
      if (!supabase) return;
      const { data, error } = await supabase
        .from('wire_types')
        .select('*')
        .eq('active', true)
        .order('sort_order', { ascending: true });
      if (error) return;
      if (data && data.length) {
        setWireTypes(data.map(r => r.name));
      } else {
        setWireTypes(['CAT6', 'CAT6A', 'Fiber', 'Coax', 'Power']);
      }
    } catch (_) {}
  };

  useEffect(() => { loadWireTypes(); }, []);
  // Issues state (now loaded from Supabase)
  const [issues, setIssues] = useState([]);

  // Contacts/People state (from Supabase)
  const [contacts, setContacts] = useState([]);
  const [contactIssueMap, setContactIssueMap] = useState({});

  const loadContacts = useCallback(async (projectId) => {
    if (!supabase || !projectId) return [];
    try {
      const { data, error } = await supabase
        .from('contacts')
        .select('*')
        .eq('project_id', projectId)
        .order('created_at', { ascending: true });
      if (error) throw error;
      const rows = data ? data.sort((a, b) => (a.name || '').localeCompare(b.name || '')) : [];
      setContacts(rows);
      return rows;
    } catch (err) {
      console.error('loadContacts failed', err);
      return [];
    }
  }, []);

  const loadContactIssues = useCallback(async (projectId) => {
    try {
      if (!supabase || !projectId) return;
      const { data, error } = await supabase
        .from('issue_contacts')
        .select('id, issue_id, contact_id, issues(title, status), project_id')
        .eq('project_id', projectId);
      if (error) return;
      const map = {};
      (data || []).forEach(row => {
        const issueInfo = row.issues || {};
        if (!map[row.contact_id]) map[row.contact_id] = [];
        map[row.contact_id].push({
          assignmentId: row.id,
          issueId: row.issue_id,
          title: issueInfo.title || 'Issue',
          status: issueInfo.status || 'open'
        });
      });
      setContactIssueMap(map);
    } catch (_) {}
  }, []);

  const loadStakeholderRoles = useCallback(async () => {
    if (!supabase) return;
    try {
      const { data, error } = await supabase
        .from('stakeholder_roles')
        .select('*')
        .order('category', { ascending: true })
        .order('name', { ascending: true });
      if (error) throw error;
      setStakeholderRoles(data || []);
    } catch (err) {
      console.error('loadStakeholderRoles failed', err);
    }
  }, []);

  const loadStakeholderDefaults = useCallback(async () => {
    if (!supabase) return;
    try {
      const { data, error } = await supabase
        .from('stakeholder_defaults')
        .select('*');
      if (error) throw error;
      setStakeholderDefaults(data || []);
    } catch (err) {
      console.error('loadStakeholderDefaults failed', err);
    }
  }, []);

  const ensureProjectContact = useCallback(async ({ projectId, roleId, fullName, email, isInternal = false, isPrimary = false }) => {
    if (!supabase || !projectId) return null;
    const trimmedEmail = (email || '').trim();
    try {
      let existing = null;
      if (trimmedEmail) {
        const { data, error } = await supabase
          .from('contacts')
          .select('*')
          .eq('project_id', projectId)
          .eq('email', trimmedEmail)
          .maybeSingle();
        if (!error) existing = data;
      }

      if (!existing && fullName) {
        const { data, error } = await supabase
          .from('contacts')
          .select('*')
          .eq('project_id', projectId)
          .eq('name', fullName)
          .maybeSingle();
        if (!error) existing = data;
      }

      if (!existing) {
        const payload = {
          project_id: projectId,
          name: fullName || trimmedEmail || 'Stakeholder',
          email: trimmedEmail || null,
          role: null,
          report: false,
          stakeholder_role_id: roleId,
          is_internal: isInternal,
          is_primary: isPrimary
        };
        const { data, error } = await supabase
          .from('contacts')
          .insert([payload])
          .select('*')
          .single();
        if (error) throw error;
        existing = data;
      } else {
        const updates = {
          stakeholder_role_id: roleId,
          is_internal: isInternal,
          is_primary: isPrimary || existing.is_primary
        };
        if (fullName && fullName.trim() && fullName !== existing.name) updates.name = fullName.trim();
        if (trimmedEmail && trimmedEmail !== existing.email) updates.email = trimmedEmail;
        const { data, error } = await supabase
          .from('contacts')
          .update(updates)
          .eq('id', existing.id)
          .select('*')
          .single();
        if (error) throw error;
        existing = data;
      }

      await loadContacts(projectId);
      return existing;
    } catch (err) {
      console.error('ensureProjectContact failed', err);
      return null;
    }
  }, [loadContacts]);

  const loadProjectStakeholders = useCallback(async (projectId) => {
    if (!supabase || !projectId) return;
    try {
      const [{ data: internalRows, error: internalErr }, { data: externalRows, error: externalErr }, { data: contactRows, error: contactsErr }] = await Promise.all([
        supabase
          .from('project_internal_stakeholders')
          .select('id, project_id, role_id, full_name, email, profile_id, is_primary, created_at')
          .eq('project_id', projectId)
          .order('created_at', { ascending: true }),
        supabase
          .from('project_external_stakeholders')
          .select('id, project_id, role_id, contact_id, is_primary, created_at, contacts(*), stakeholder_roles(*)')
          .eq('project_id', projectId)
          .order('created_at', { ascending: true }),
        supabase
          .from('contacts')
          .select('*')
          .eq('project_id', projectId)
      ]);

      if (internalErr) throw internalErr;
      if (externalErr) throw externalErr;
      if (contactsErr) throw contactsErr;

      const contactsForProject = contactRows || [];
      const internal = (internalRows || []).map(row => {
        const role = stakeholderRoles.find(r => r.id === row.role_id) || null;
        const contactMatch = contactsForProject.find(c => {
          if (!row.email || !c.email) return false;
          return c.email.toLowerCase() === row.email.toLowerCase();
        });
        return {
          id: row.id,
          roleId: row.role_id,
          role,
          fullName: row.full_name,
          email: row.email,
          isPrimary: row.is_primary,
          profileId: row.profile_id,
          contactId: contactMatch?.id || null,
          contact: contactMatch || null
        };
      });

      const external = (externalRows || []).map(row => ({
        id: row.id,
        roleId: row.role_id,
        role: row.stakeholder_roles || null,
        contactId: row.contact_id,
        isPrimary: row.is_primary,
        contact: row.contacts || null
      }));

      setProjectStakeholders(prev => ({ ...prev, [projectId]: { internal, external } }));
      setProjects(prev => prev.map(p => p.id === projectId ? { ...p, internalStakeholders: internal, externalStakeholders: external } : p));
      setSelectedProject(prev => prev && prev.id === projectId ? { ...prev, internalStakeholders: internal, externalStakeholders: external } : prev);
    } catch (err) {
      console.error('loadProjectStakeholders failed', err);
    }
  }, [stakeholderRoles]);

  const applyDefaultStakeholders = useCallback(async (projectId) => {
    if (!supabase || !projectId) return;
    try {
      let defaults = stakeholderDefaults;
      if (!defaults.length) {
        const { data, error } = await supabase.from('stakeholder_defaults').select('*');
        if (error) throw error;
        defaults = data || [];
        setStakeholderDefaults(defaults);
      }

      for (const def of defaults) {
        if (!def?.role_id) continue;
        const role = stakeholderRoles.find(r => r.id === def.role_id);
        if (!role) continue;

        if (def.is_internal) {
          await supabase
            .from('project_internal_stakeholders')
            .upsert([{
              project_id: projectId,
              role_id: def.role_id,
              full_name: def.full_name,
              email: def.email,
              profile_id: def.profile_id || null,
              is_primary: true
            }], { onConflict: 'project_id,role_id' });

          await ensureProjectContact({
            projectId,
            roleId: def.role_id,
            fullName: def.full_name,
            email: def.email,
            isInternal: true,
            isPrimary: true
          });
        } else {
          const contact = await ensureProjectContact({
            projectId,
            roleId: def.role_id,
            fullName: def.full_name,
            email: def.email,
            isInternal: false,
            isPrimary: true
          });
          if (contact?.id) {
            await supabase
              .from('project_external_stakeholders')
              .upsert([{
                project_id: projectId,
                contact_id: contact.id,
                role_id: def.role_id,
                is_primary: true
              }], { onConflict: 'project_id,contact_id,role_id' });
          }
        }
      }

      await loadProjectStakeholders(projectId);
      await loadContactIssues(projectId);
    } catch (err) {
      console.error('applyDefaultStakeholders failed', err);
    }
  }, [stakeholderDefaults, stakeholderRoles, ensureProjectContact, loadProjectStakeholders, loadContactIssues]);

  useEffect(() => {
    loadStakeholderRoles();
    loadStakeholderDefaults();
  }, [loadStakeholderRoles, loadStakeholderDefaults]);

  useEffect(() => {
    if (selectedProjectId) {
      const fetchCurrent = async () => {
        const [contactRows] = await Promise.all([
          loadContacts(selectedProjectId),
          loadProjectStakeholders(selectedProjectId)
        ]);
        if (contactRows?.length) {
          setContacts(contactRows)
        }
        await loadContactIssues(selectedProjectId);
      };
      fetchCurrent();
    }
  }, [selectedProjectId, loadContacts, loadContactIssues, loadProjectStakeholders]);

  // Load wire drops for a project when viewing it
  const loadWireDrops = useCallback(async (projectId) => {
    try {
      if (!supabase) return;
      const { data, error } = await supabase
        .from('wire_drops')
        .select('*')
        .eq('project_id', projectId)
        .order('created_at', { ascending: true });
      if (error) return;
      const drops = (data || []).map(row => ({
        id: row.id,
        uid: (row.uid || '').toUpperCase(),
        name: row.name,
        location: row.location,
        type: row.type || 'CAT6',
        prewirePhoto: row.prewire_photo,
        installedPhoto: row.installed_photo,
      }));
      setProjects(prev => prev.map(p => p.id === projectId ? { ...p, wireDrops: drops } : p));
      setSelectedProject(prev => prev && prev.id === projectId ? { ...prev, wireDrops: drops } : prev);
    } catch (_) {}
  }, []);

  useEffect(() => {
    if (currentView === 'project' && selectedProject && selectedProjectId && (!selectedProject.wireDrops || selectedProject.wireDrops.length === 0)) {
      loadWireDrops(selectedProjectId);
      loadProjectStakeholders(selectedProjectId);
    }
  }, [currentView, selectedProject, selectedProjectId, loadWireDrops, loadProjectStakeholders]);

  const loadProjects = async () => {
    try {
      if (!supabase) {
        return;
      }
      const { data, error } = await supabase
        .from('projects')
        .select('*')
        .order('created_at', { ascending: false });
      if (error) {
        return;
      }
      const mapped = (data || []).map(mapProject);
      setProjects(mapped);
      // Prefetch wire drops so progress bars are correct on dashboard
      try {
        await Promise.all((mapped || []).map(p => loadWireDrops(p.id)));
      } catch (_) {}
    } catch (_) {}
  };

  useEffect(() => {
    loadProjects();
    // eslint-disable-next-line
  }, []);

  // Load issues for a project when viewing it (with photos)
  const loadIssues = useCallback(async (projectId) => {
    try {
      if (!supabase) return;
      const { data: issueRows, error: issueErr } = await supabase
        .from('issues')
        .select('*')
        .eq('project_id', projectId)
        .order('created_at', { ascending: false });
      if (issueErr) return;

      const mapped = (issueRows || []).map(r => ({
        id: r.id,
        projectId: r.project_id,
        title: r.title,
        status: r.status,
        date: r.created_at ? new Date(r.created_at).toLocaleDateString() : '',
        notes: r.notes || '',
        photos: [],
        assignees: []
      }));

      // Load photos for these issues (if any exist)
      const ids = mapped.map(i => i.id);
      if (ids.length) {
        const { data: photoRows, error: photoErr } = await supabase
          .from('issue_photos')
          .select('*')
          .in('issue_id', ids);
        if (!photoErr && photoRows && photoRows.length) {
          const byIssue = new Map();
          for (const r of photoRows) {
            if (!byIssue.has(r.issue_id)) byIssue.set(r.issue_id, []);
            byIssue.get(r.issue_id).push(r.url);
          }
          mapped.forEach(m => { m.photos = byIssue.get(m.id) || []; });
        }
      }

      if (ids.length) {
        const { data: assignmentRows, error: assignmentErr } = await supabase
          .from('issue_contacts')
          .select('id, issue_id, contact_id, contacts(*)')
          .in('issue_id', ids);
        if (!assignmentErr && assignmentRows && assignmentRows.length) {
          const byIssue = new Map();
          assignmentRows.forEach(row => {
            if (!byIssue.has(row.issue_id)) byIssue.set(row.issue_id, []);
            const contact = row.contacts || null;
            const role = contact?.stakeholder_role_id ? stakeholderRoles.find(r => r.id === contact.stakeholder_role_id) : null;
            byIssue.get(row.issue_id).push({
              id: row.id,
              contactId: row.contact_id,
              contact,
              role
            });
          });
          mapped.forEach(m => { m.assignees = byIssue.get(m.id) || []; });
        }
      }

      setIssues(mapped);
      if (projectId === selectedProject?.id) {
        await loadContactIssues(projectId);
      }
    } catch (_) {}
  }, [selectedProject?.id, loadContactIssues, stakeholderRoles]);

  useEffect(() => {
    if ((currentView === 'project' || currentView === 'people' || currentView === 'issueForm' || currentView === 'issueDetail') && selectedProjectId) {
      loadIssues(selectedProjectId);
    }
  }, [currentView, selectedProjectId, loadIssues]);

  const openWireDropByUid = useCallback(async (value) => {
    const raw = String(value || '').trim();
    if (!raw) {
      alert('No UID provided');
      return false;
    }
    if (!supabase) {
      alert('Supabase not configured');
      return false;
    }

    const uid = raw.toUpperCase();

    try {
      const { data: dropRow, error } = await supabase
        .from('wire_drops')
        .select('*')
        .eq('uid', uid)
        .single();
      if (error) throw error;

      let projectRecord = projects.find(p => p.id === dropRow.project_id);
      if (!projectRecord) {
        const { data: projectRow, error: projectErr } = await supabase
          .from('projects')
          .select('*')
          .eq('id', dropRow.project_id)
          .single();
        if (projectErr) throw projectErr;
        projectRecord = mapProject(projectRow);
        setProjects(prev => {
          const exists = prev.some(p => p.id === projectRecord.id);
          return exists ? prev : [projectRecord, ...prev];
        });
      }

      await loadWireDrops(dropRow.project_id);
      await loadIssues(dropRow.project_id);
      setSelectedProject(prev => (
        prev && prev.id === dropRow.project_id
          ? prev
          : projectRecord || prev
      ));
      setSelectedWireDrop({
        id: dropRow.id,
        uid: (dropRow.uid || '').toUpperCase(),
        name: dropRow.name,
        location: dropRow.location,
        type: dropRow.type || 'CAT6',
        prewirePhoto: dropRow.prewire_photo,
        installedPhoto: dropRow.installed_photo
      });
      setPendingSection(null);
      setCurrentView('wireDropDetail');
      setShowScanner(false);
      return true;
    } catch (err) {
      console.error('Failed to open wire drop by UID', err);
      alert(err.message || 'Wire drop not found');
      return false;
    }
  }, [projects, mapProject, loadWireDrops, loadIssues]);

  // Calculate project progress based on wire drops
  const calculateProjectProgress = (project) => {
    if (!project.wireDrops || project.wireDrops.length === 0) return 0;
    
    let totalProgress = 0;
    project.wireDrops.forEach(drop => {
      // Each drop can contribute up to 100% (50% for prewire, 50% for installed)
      if (drop.prewirePhoto) totalProgress += 50;
      if (drop.installedPhoto) totalProgress += 50;
    });
    
    return Math.round(totalProgress / project.wireDrops.length);
  };

  // Filter projects based on technician view
  const getFilteredProjects = () => {
    // For now, show all projects (assignment optional)
    return projects;
  };

  // Theme
  const theme = {
    dark: {
      bg: 'bg-black',
      bgSecondary: 'bg-gray-900',
      surface: 'bg-gray-900',
      surfaceHover: 'bg-gray-800',
      border: 'border-gray-800',
      text: 'text-white',
      textSecondary: 'text-white',
      textTertiary: 'text-white',
      accent: 'bg-blue-500',
      accentText: 'text-white',
      success: 'bg-green-600',
      warning: 'bg-orange-600',
      danger: 'bg-red-600',
      mutedBg: 'bg-gray-800',
      mutedText: 'text-white'
    },
    light: {
      bg: 'bg-gray-50',
      bgSecondary: 'bg-white',
      surface: 'bg-white',
      surfaceHover: 'bg-gray-50',
      border: 'border-gray-200',
      text: 'text-gray-900',
      textSecondary: 'text-gray-600',
      textTertiary: 'text-gray-400',
      accent: 'bg-blue-500',
      accentText: 'text-blue-500',
      success: 'bg-green-500',
      warning: 'bg-orange-500',
      danger: 'bg-red-500',
      mutedBg: 'bg-gray-200',
      mutedText: 'text-gray-700'
    }
  };

  const t = darkMode ? theme.dark : theme.light;

  // Time tracking functions
  const handleCheckIn = (projectId) => {
    const now = new Date();
    setActiveCheckIns(prev => ({
      ...prev,
      [projectId]: now
    }));
    
    const newLog = {
      id: Date.now(),
      projectId,
      technician: 'Current User', // Would come from auth
      checkIn: now.toISOString(),
      checkOut: null
    };
    
    setTimeLogs(prev => [...prev, newLog]);
    alert('Checked in successfully!');
  };

  const handleCheckOut = (projectId) => {
    if (!activeCheckIns[projectId]) {
      alert('No active check-in found!');
      return;
    }
    
    const checkInTime = new Date(activeCheckIns[projectId]);
    const checkOutTime = new Date();
    const hoursWorked = ((checkOutTime - checkInTime) / (1000 * 60 * 60)).toFixed(2);
    
    setTimeLogs(prev => prev.map(log => 
      log.projectId === projectId && !log.checkOut
        ? { ...log, checkOut: checkOutTime.toISOString() }
        : log
    ));
    
    setActiveCheckIns(prev => {
      const updated = { ...prev };
      delete updated[projectId];
      return updated;
    });
    
    alert(`Checked out! Hours worked: ${hoursWorked}`);
  };

  // Handle photo upload with camera option
  const handlePhotoCapture = (callback) => {
    // In a real app, this would trigger camera API
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = 'image/*';
    input.capture = 'environment'; // Use 'user' for front camera
    input.onchange = (e) => {
      const file = e.target.files[0];
      if (file) {
        const url = URL.createObjectURL(file);
        callback({ file, preview: url });
      }
    };
    input.click();
  };

  // Open links in new window
  const openLink = (url) => {
    const raw = typeof url === 'string' ? url.trim() : '';
    if (!raw) {
      alert('No URL configured');
      return;
    }
    const target = /^https?:\/\//i.test(raw) ? raw : `https://${raw}`;
    window.open(target, '_blank', 'noopener,noreferrer');
  };

  // Fullscreen Image Modal
  const FullscreenImageModal = () => {
    if (!fullscreenImage) return null;
    
    return (
      <div className="fixed inset-0 bg-black/90 flex items-center justify-center z-50 p-4">
        <div className="relative max-w-full max-h-full">
          <button 
            onClick={() => setFullscreenImage(null)}
            className="absolute top-4 right-4 p-2 bg-black/50 rounded-full text-white z-10"
          >
            <X size={24} />
          </button>
          <img 
            src={fullscreenImage} 
            alt="Fullscreen view" 
            className="max-w-full max-h-full object-contain"
          />
        </div>
      </div>
    );
  };

  // Wire Drop Form
  const WireDropForm = () => {
    const [formData, setFormData] = useState(() => ({
      id: selectedWireDrop?.id || '',
      uid: (selectedWireDrop?.uid || generateWireDropUid()).toUpperCase(),
      name: selectedWireDrop?.name || '',
      location: selectedWireDrop?.location || '',
      type: selectedWireDrop?.type || 'CAT6',
      prewirePhoto: selectedWireDrop?.prewirePhoto || null,
      installedPhoto: selectedWireDrop?.installedPhoto || null
    }));

    const [saveError, setSaveError] = useState('');
    const [saving, setSaving] = useState(false);

    useEffect(() => {
      if (selectedWireDrop) {
        setFormData({
          id: selectedWireDrop.id || '',
          uid: (selectedWireDrop.uid || generateWireDropUid()).toUpperCase(),
          name: selectedWireDrop.name || '',
          location: selectedWireDrop.location || '',
          type: selectedWireDrop.type || 'CAT6',
          prewirePhoto: selectedWireDrop.prewirePhoto || null,
          installedPhoto: selectedWireDrop.installedPhoto || null
        });
      } else {
        setFormData({
          id: '',
          uid: generateWireDropUid(),
          name: '',
          location: '',
          type: 'CAT6',
          prewirePhoto: null,
          installedPhoto: null
        });
      }
    }, [selectedWireDrop]);

    const handleSave = async () => {
      if (!formData.name.trim() || !formData.location.trim() || !formData.uid.trim()) {
        alert('Please fill in all required fields');
        return;
      }

      if (!supabase) { setSaveError('Supabase not configured'); return; }
      try {
        setSaving(true);
        setSaveError('');
        const normalizedUid = formData.uid.trim().toUpperCase();
        const payload = {
          project_id: selectedProject.id,
          uid: normalizedUid,
          name: formData.name.trim(),
          location: formData.location.trim(),
          type: formData.type,
          prewire_photo: formData.prewirePhoto,
          installed_photo: formData.installedPhoto,
        };

        if (selectedWireDrop?.id) {
          const { error } = await supabase
            .from('wire_drops')
            .update(payload)
            .eq('id', selectedWireDrop.id);
          if (error) {
            const message = String(error.message || '').toLowerCase();
            if (message.includes('duplicate')) {
              setSaveError('UID already exists. Please generate a new one.');
            } else {
              setSaveError(error.message);
            }
            return;
          }
          alert('Wire drop updated!');
        } else {
          const { data, error } = await supabase
            .from('wire_drops')
            .insert([payload])
            .select('*')
            .single();
          if (error) {
            const message = String(error.message || '').toLowerCase();
            if (message.includes('duplicate')) {
              setSaveError('UID already exists. Generate a new UID and try again.');
            } else {
              setSaveError(error.message);
            }
            return;
          }
          if (data) {
            setFormData(prev => ({ ...prev, id: data.id }));
          }
          alert('Wire drop added!');
        }

        await loadWireDrops(selectedProject.id);
        setCurrentView('wireDropList');
        setSelectedWireDrop(null);
      } catch (e) {
        setSaveError(e.message);
      } finally {
        setSaving(false);
      }
    };

    return (
      <div className={`min-h-screen ${t.bg}`}>
        {/* Header */}
        <div className={`${t.bgSecondary} border-b ${t.border} px-4 py-3`}>
          <div className="flex items-center justify-between">
            <button onClick={() => setCurrentView('wireDropList')} className={`p-2 ${t.text}`}>
              <ArrowLeft size={24} />
            </button>
            <h1 className={`text-lg font-semibold ${t.text}`}>
              {selectedWireDrop ? 'Edit Wire Drop' : 'Add Wire Drop'}
            </h1>
            <button onClick={handleSave} disabled={saving} className={`p-2 ${t.accentText}`}>
              <Save size={20} />
            </button>
          </div>
        </div>

        <div className="p-4 space-y-4">
          {saveError && <div className="text-red-400 text-sm">{saveError}</div>}
          <input
            type="text"
            value={formData.name}
            onChange={(e) => setFormData({...formData, name: e.target.value})}
            className={`w-full px-3 py-3 rounded-lg ${t.surface} ${t.text} border ${t.border}`}
            placeholder="Wire Drop Name *"
          />
          
          <div>
            <label className={`text-xs ${t.textSecondary} block mb-1`}>UID</label>
            <div className={`w-full px-3 py-3 rounded-lg ${t.surface} ${t.text} border ${t.border} text-sm`}>{formData.uid}</div>
          </div>
          
          <input
            type="text"
            value={formData.location}
            onChange={(e) => setFormData({...formData, location: e.target.value})}
            className={`w-full px-3 py-3 rounded-lg ${t.surface} ${t.text} border ${t.border}`}
            placeholder="Location *"
          />
          
          <div className="flex gap-2">
            <select
              value={formData.type}
              onChange={(e) => setFormData({...formData, type: e.target.value})}
              className={`flex-1 px-3 py-3 rounded-lg ${t.surface} ${t.text} border ${t.border}`}
            >
              {(wireTypes.length ? wireTypes : ['CAT6','CAT6A','Fiber','Coax','Power']).map(opt => (
                <option key={opt} value={opt}>{opt}</option>
              ))}
            </select>
            <button
              type="button"
              onClick={async () => {
                try {
                  const name = (prompt('New wire type name:') || '').trim()
                  if (!name) return
                  if (!supabase) { alert('Supabase not configured'); return }
                  const { error } = await supabase
                    .from('wire_types')
                    .insert([{ name, active: true }])
                  if (error && !String(error.message).includes('duplicate')) {
                    alert(`Failed to add type: ${error.message}`)
                    return
                  }
                  await loadWireTypes()
                  setFormData(prev => ({ ...prev, type: name }))
                } catch (e) {
                  alert(`Failed to add type: ${e.message}`)
                }
              }}
              className={`px-3 py-3 rounded-lg ${t.accent} text-white text-sm whitespace-nowrap`}
            >
              Add Type
            </button>
          </div>
        </div>
      </div>
    );
  };

  // Project Form for PM
  const ProjectForm = () => {
    const [formData, setFormData] = useState(
      selectedProject || {
        name: '',
        client: '',
        address: '',
        phase: 'Planning',
        startDate: '',
        endDate: '',
        wiringDiagramUrl: '',
        portalProposalUrl: '',
        oneDrivePhotos: '',
        oneDriveFiles: '',
        oneDriveProcurement: '',
        stakeholders: [],
        team: [],
        wireDrops: []
      }
    );

    const [saving, setSaving] = useState(false)
    const [saveError, setSaveError] = useState('')

    const toDb = (f) => ({
      name: f.name,
      client: f.client || null,
      address: f.address || null,
      phase: f.phase || null,
      start_date: f.startDate || null,
      end_date: f.endDate || null,
      wiring_diagram_url: f.wiringDiagramUrl || null,
      portal_proposal_url: f.portalProposalUrl || null,
      one_drive_photos: f.oneDrivePhotos || null,
      one_drive_files: f.oneDriveFiles || null,
      one_drive_procurement: f.oneDriveProcurement || null,
    })

    const handleSave = async () => {
      try {
        setSaving(true)
        setSaveError('')

        if (!formData.name || !formData.wiringDiagramUrl || !formData.portalProposalUrl) {
          setSaveError('Please fill in required fields (Name, Wiring Diagram URL, Portal Proposal URL)')
          return
        }
        if (!supabase) {
          setSaveError('Supabase not configured')
          return
        }

        if (selectedProject?.id) {
          // Update
          const { data, error } = await supabase
            .from('projects')
            .update(toDb(formData))
            .eq('id', selectedProject.id)
            .select('*')
            .single()
          if (error) { setSaveError(error.message); return }
          const updated = mapProject(data)
          setProjects(prev => prev.map(p => p.id === updated.id ? updated : p))
          setSelectedProject(updated)
          alert('Project updated!')
          await loadProjects()
        } else {
          // Insert
          const { data, error } = await supabase
            .from('projects')
            .insert([toDb(formData)])
            .select('*')
            .single()
          if (error) { setSaveError(error.message); return }
          const created = mapProject(data)
          await applyDefaultStakeholders(created.id)
          await loadProjectStakeholders(created.id)
          setProjects(prev => [created, ...prev])
          setSelectedProject(created)
          alert('Project created!')
          await loadProjects()
        }

        setCurrentView('pmDashboard')
      } catch (e) {
        setSaveError(e.message)
      } finally {
        setSaving(false)
      }
    }

    return (
      <div className={`min-h-screen ${t.bg}`}>
        {/* Header */}
        <div className={`${t.bgSecondary} border-b ${t.border} px-4 py-3`}>
          <div className="flex items-center justify-between">
            <button onClick={() => setCurrentView('pmDashboard')} className={`p-2 ${t.text}`}>
              <ArrowLeft size={24} />
            </button>
            <h1 className={`text-lg font-semibold ${t.text}`}>
              {selectedProject ? 'Edit Project' : 'New Project'}
            </h1>
            <button onClick={handleSave} disabled={saving} className={`p-2 ${t.accentText}`}>
              <Save size={20} />
            </button>
          </div>
        </div>

        <div className="p-4 space-y-4">
          {saveError && (
            <div className="text-red-400 text-sm">{saveError}</div>
          )}
          <input
            type="text"
            value={formData.name}
            onChange={(e) => setFormData({...formData, name: e.target.value})}
            className={`w-full px-3 py-3 rounded-lg ${t.surface} ${t.text} border ${t.border}`}
            placeholder="Project Name *"
          />
          
          <input
            type="text"
            value={formData.client}
            onChange={(e) => setFormData({...formData, client: e.target.value})}
            className={`w-full px-3 py-3 rounded-lg ${t.surface} ${t.text} border ${t.border}`}
            placeholder="Client"
          />
          
          <input
            type="text"
            value={formData.address}
            onChange={(e) => setFormData({...formData, address: e.target.value})}
            className={`w-full px-3 py-3 rounded-lg ${t.surface} ${t.text} border ${t.border}`}
            placeholder="Address"
          />

          <div className={`p-4 rounded-xl ${t.surface} border ${t.border}`}>
            <h3 className={`font-medium ${t.text} mb-3`}>Required Links</h3>
            <input
              type="url"
              value={formData.wiringDiagramUrl}
              onChange={(e) => setFormData({...formData, wiringDiagramUrl: e.target.value})}
              className={`w-full px-3 py-3 rounded-lg ${t.surfaceHover} ${t.text} border ${t.border} mb-3`}
              placeholder="Wiring Diagram URL (Lucid Chart) *"
            />
            <input
              type="url"
              value={formData.portalProposalUrl}
              onChange={(e) => setFormData({...formData, portalProposalUrl: e.target.value})}
              className={`w-full px-3 py-3 rounded-lg ${t.surfaceHover} ${t.text} border ${t.border}`}
              placeholder="Portal Proposal URL *"
            />
          </div>

          <div className={`p-4 rounded-xl ${t.surface} border ${t.border}`}>
            <h3 className={`font-medium ${t.text} mb-3`}>OneDrive Links</h3>
            <input
              type="url"
              value={formData.oneDrivePhotos}
              onChange={(e) => setFormData({...formData, oneDrivePhotos: e.target.value})}
              className={`w-full px-3 py-3 rounded-lg ${t.surfaceHover} ${t.text} border ${t.border} mb-3`}
              placeholder="OneDrive Photos Folder URL"
            />
            <input
              type="url"
              value={formData.oneDriveFiles}
              onChange={(e) => setFormData({...formData, oneDriveFiles: e.target.value})}
              className={`w-full px-3 py-3 rounded-lg ${t.surfaceHover} ${t.text} border ${t.border} mb-3`}
              placeholder="OneDrive Files Folder URL"
            />
            <input
              type="url"
              value={formData.oneDriveProcurement}
              onChange={(e) => setFormData({...formData, oneDriveProcurement: e.target.value})}
              className={`w-full px-3 py-3 rounded-lg ${t.surfaceHover} ${t.text} border ${t.border}`}
              placeholder="OneDrive Procurement Folder URL"
            />
          </div>
        </div>
      </div>
    );
  };

  // Technician Dashboard
  const TechnicianDashboard = () => (
    <div className={`min-h-screen ${t.bg}`}>
      {/* Header */}
      <div className={`${t.bgSecondary} border-b ${t.border} px-4 py-3`}>
        <div className="flex items-center justify-between mb-3">
          <div className="flex items-center gap-2">
            <img src="/logo.png" alt="IS" className="h-5 w-auto" onError={(e)=>{e.currentTarget.style.display='none'}} />
            <h1 className={`text-lg font-semibold ${t.text}`}>Technician Dashboard</h1>
          </div>
          <div className="flex items-center gap-2">
            {user && (
              <span className={`hidden sm:block text-xs ${t.textSecondary}`}>Hi, {user.user_metadata?.full_name || user.email}</span>
            )}
            <button onClick={() => setUserRole('pm')} className={`p-2 ${t.accentText} text-sm`}>
              Switch to PM
            </button>
            <button onClick={() => setDarkMode(!darkMode)} className={`p-2 ${t.text}`}>
              {darkMode ? <Sun size={20} /> : <Moon size={20} />}
            </button>
          </div>
        </div>
        
        <div className="flex gap-2">
          <button 
            onClick={() => setViewMyProjects(true)}
            className={`px-4 py-2 rounded-lg border ${t.border} ${viewMyProjects ? `${t.accent} text-white` : `${t.mutedBg} ${t.mutedText}`} font-medium`}
          >
            My Projects
          </button>
          <button 
            onClick={() => setViewMyProjects(false)}
            className={`px-4 py-2 rounded-lg border ${t.border} ${!viewMyProjects ? `${t.accent} text-white` : `${t.mutedBg} ${t.mutedText}`} font-medium`}
          >
            All Projects
          </button>
        </div>
      </div>

      {/* Calendar Widget (Microsoft Graph) */}
      <div className={`m-4 p-4 rounded-xl ${t.surface} border ${t.border}`} style={{marginBottom: '6rem'}}>
        <div className="flex items-center justify-between mb-3">
          <h2 className={`font-medium ${t.text}`}>Today's Schedule</h2>
          <button onClick={loadTodayEvents} className={`px-2 py-1 rounded ${t.surfaceHover} ${t.text} text-xs border ${t.border}`}>
            <Calendar size={16} className="inline mr-1" /> Refresh
          </button>
        </div>
        {(!calendarReady) && (
          <div className="flex items-center justify-between mb-2">
            <div className={`text-xs ${t.textSecondary}`}>Connect your Microsoft Calendar</div>
            <button
              onClick={async()=>{
                await supabase.auth.signInWithOAuth({
                  provider: 'azure',
                  options: { scopes: 'openid profile email offline_access Calendars.Read Contacts.Read', redirectTo: `${window.location.origin}/auth/callback` }
                })
              }}
              className={`px-2 py-1 rounded ${t.accent} text-white text-xs`}
            >
              Connect
            </button>
          </div>
        )}
        {eventsError && <div className="text-xs text-red-400 mb-2">{eventsError}</div>}
        <div className="space-y-2">
          {events.length === 0 ? (
            <div className={`text-sm ${t.textSecondary}`}>No events today</div>
          ) : (
            events.map(ev => (
              <div key={ev.id} className="flex items-center gap-3">
                <div className={`w-2 h-2 rounded-full ${t.success}`}></div>
                <span className={`text-sm ${t.text}`}>{new Date(ev.start).toLocaleTimeString([], {hour: 'numeric', minute: '2-digit'})} - {ev.subject}</span>
              </div>
            ))
          )}
        </div>
      </div>

      {/* Projects */}
      <div className="px-4 pb-32">
        <h2 className={`text-lg font-semibold ${t.text} mb-3`}>
          {viewMyProjects ? 'My projects' : 'All projects'}
        </h2>
        
        {getFilteredProjects().map((project) => {
          const progress = calculateProjectProgress(project);
          const isCheckedIn = activeCheckIns[project.id];
          
          return (
            <div key={project.id} className={`mb-3 rounded-xl ${t.surface} border ${t.border} overflow-hidden`}>
              {/* Progress Bar */}
              <div className="relative h-14">
                <div 
                  className={`absolute inset-0 ${
                    progress > 70 ? t.success : 
                    progress > 40 ? t.warning : 
                    t.danger
                  } opacity-90`}
                  style={{ width: `${progress}%` }}
                ></div>
                <div className={`absolute inset-0 flex items-center justify-center font-semibold ${t.text}`}>
                  {project.name} - {progress}%
                </div>
              </div>
              
              {/* Action Buttons */}
              <div className="p-3 flex gap-2">
                <button 
                  onClick={() => {
                    setSelectedProject(project);
                    setCurrentView('project');
                  }}
                  className={`flex-1 py-2 px-2 rounded-lg ${t.surfaceHover} ${t.text} font-medium text-xs sm:text-sm leading-tight`}
                >
                  OPEN
                </button>
                <button
                  onClick={() => {
                    setSelectedProject(project);
                    setPendingSection('issues');
                    setCurrentView('project');
                  }}
                  className={`flex-1 py-2 px-2 rounded-lg ${t.surfaceHover} ${t.text} font-medium text-xs sm:text-sm leading-tight`}
                >
                  ISSUES
                </button>
                <button 
                  onClick={() => handleCheckIn(project.id)}
                  disabled={isCheckedIn}
                  className={`flex-1 py-2 px-2 rounded-lg ${isCheckedIn ? 'bg-green-700 text-white' : `${t.surfaceHover} ${t.text}`} font-medium text-xs sm:text-sm leading-tight`}
                >
                  {isCheckedIn ? '✓ IN' : 'CHECK IN'}
                </button>
                <button 
                  onClick={() => handleCheckOut(project.id)}
                  disabled={!isCheckedIn}
                  className={`flex-1 py-2 px-2 rounded-lg ${t.surfaceHover} ${t.text} font-medium text-xs sm:text-sm leading-tight ${!isCheckedIn ? 'opacity-50 cursor-not-allowed' : ''}`}
                >
                  CHECK OUT
                </button>
              </div>
            </div>
          );
        })}
      </div>

      {/* Bottom Navigation */}
      <div className={`fixed bottom-0 left-0 right-0 px-3 py-2 flex gap-2 border-t ${t.border} ${t.bgSecondary}`} style={{paddingBottom: 'calc(env(safe-area-inset-bottom) + 10px)'}}>
        <button 
          onClick={() => setCurrentView('people')}
          className={`flex-1 py-3 rounded-lg ${t.surfaceHover} ${t.text} font-medium`}
        >
          <Users size={20} className="mx-auto mb-1" />
          People
        </button>
        <button 
          onClick={() => {
            const projectsForView = getFilteredProjects();
            if (projectsForView.length > 0) {
              setSelectedProject(projectsForView[0]);
              setPendingSection('wireDrops');
              setCurrentView('project');
            }
          }}
          className={`flex-1 py-3 rounded-lg ${t.surfaceHover} ${t.text} font-medium`}
        >
          <Zap size={20} className="mx-auto mb-1" />
          Wire Drops
        </button>
        <button 
          onClick={() => setShowScanner(true)}
          className={`flex-1 py-3 rounded-lg ${t.surfaceHover} ${t.text} font-medium`}
        >
          <QrCode size={20} className="mx-auto mb-1" />
          Scan Tag
        </button>
      </div>
    </div>
  );

  // Wire Drop List View (searchable)
  const WireDropListView = () => {
    const filteredDrops = selectedProject?.wireDrops.filter(drop => 
      drop.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      drop.location.toLowerCase().includes(searchQuery.toLowerCase()) ||
      drop.uid.toLowerCase().includes(searchQuery.toLowerCase()) ||
      drop.type.toLowerCase().includes(searchQuery.toLowerCase())
    ) || [];

    return (
      <div className={`min-h-screen ${t.bg}`}>
        {/* Header */}
        <div className={`${t.bgSecondary} border-b ${t.border} px-4 py-3`}>
          <div className="flex items-center justify-between mb-3">
            <button onClick={() => setCurrentView(userRole === 'pm' ? 'pmProjectDetail' : 'project')} className={`p-2 ${t.text}`}>
              <ArrowLeft size={24} />
            </button>
            <h1 className={`text-lg font-semibold ${t.text}`}>Wire Drops</h1>
            <button 
              onClick={() => {
                setSelectedWireDrop(null);
                setCurrentView('wireDropForm');
              }}
              className={`p-2 ${t.text}`}
            >
              <Plus size={24} />
            </button>
          </div>
          
          {/* Search */}
          <div className="relative">
            <Search size={20} className={`absolute left-3 top-3 ${t.textSecondary}`} />
            <input
              type="text"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              placeholder="Search by name, location, UID, or type..."
              className={`w-full pl-10 pr-4 py-3 rounded-lg ${t.surface} ${t.text} border ${t.border}`}
            />
          </div>
        </div>

        {/* Wire Drop List */}
        <div className="p-4">
          {filteredDrops.map(drop => {
            const prewireComplete = !!drop.prewirePhoto;
            const installComplete = !!drop.installedPhoto;
            const progress = (prewireComplete ? 50 : 0) + (installComplete ? 50 : 0);
            
            return (
              <button
                key={drop.id}
                onClick={() => {
                  setSelectedWireDrop(drop);
                  setCurrentView('wireDropDetail');
                }}
                className={`w-full mb-3 p-4 rounded-xl ${t.surface} border ${t.border} text-left`}
              >
                <div className="flex items-center justify-between mb-2">
                  <div>
                    <p className={`font-medium ${t.text}`}>{drop.name}</p>
                    <p className={`text-xs ${t.textSecondary}`}>UID: {drop.uid}</p>
                  </div>
                  <div className="flex gap-2">
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        setSelectedWireDrop(drop);
                        setCurrentView('wireDropForm');
                      }}
                      className={`p-1 ${t.surfaceHover} rounded`}
                    >
                      <Edit2 size={16} className={t.textSecondary} />
                    </button>
                    <div className={`px-2 py-1 rounded text-xs font-medium ${
                      progress === 100 ? 'bg-green-600 text-white' :
                      progress === 50 ? 'bg-orange-600 text-white' :
                      'bg-gray-600 text-white'
                    }`}>
                      {progress}%
                    </div>
                  </div>
                </div>
                <div className="flex items-center justify-between">
                  <p className={`text-sm ${t.textSecondary}`}>{drop.location}</p>
                  <p className={`text-sm ${t.textSecondary}`}>{drop.type}</p>
                </div>
                <div className="flex gap-2 mt-2">
                  {prewireComplete && <span className="text-xs bg-yellow-600 text-white px-2 py-1 rounded">Prewired</span>}
                  {installComplete && <span className="text-xs bg-green-600 text-white px-2 py-1 rounded">Installed</span>}
                </div>
              </button>
            );
          })}
        </div>
      </div>
    );
  };

  // Wire Drop Detail View
  const WireDropDetailView = () => {
    const [qrDataUrl, setQrDataUrl] = useState('');
    const [qrError, setQrError] = useState('');

    useEffect(() => {
      let cancelled = false;
      const generate = async () => {
        try {
          if (!selectedWireDrop?.uid) {
            setQrDataUrl('');
            return;
          }
          const dataUrl = await QRCode.toDataURL(selectedWireDrop.uid, { margin: 1, scale: 6 });
          if (!cancelled) {
            setQrDataUrl(dataUrl);
            setQrError('');
          }
        } catch (err) {
          if (!cancelled) {
            setQrError(err.message || 'Unable to generate QR code');
          }
        }
      };
      generate();
      return () => { cancelled = true; };
    }, [selectedWireDrop]);

    if (!selectedWireDrop) return null;

    const handlePrewirePhoto = async () => {
      const input = document.createElement('input')
      input.type = 'file'
      input.accept = 'image/*'
      input.capture = 'environment'
      input.onchange = async (e) => {
        let file = e.target.files?.[0]
        if (!file) return
        try {
          file = await compressImage(file)
          let url
          if (process.env.REACT_APP_USE_ONEDRIVE === '1' && selectedProject?.oneDrivePhotos) {
            const uidSeg = slugifySegment(selectedWireDrop.uid)
            const subPath = `wire_drops/${uidSeg}/prewire`
            if (!navigator.onLine) {
              // Queue offline
              await enqueueUpload({ rootUrl: selectedProject.oneDrivePhotos, subPath, filename: file.name, contentType: file.type, blob: file, update: { type: 'wire_drop', field: 'prewire_photo', id: selectedWireDrop.id } })
              url = URL.createObjectURL(file)
            } else {
              try {
                url = await graphUploadViaApi({ rootUrl: selectedProject.oneDrivePhotos, subPath, file })
              } catch (e) {
                const path = `projects/${selectedProject.id}/wire_drops/${uidSeg}/prewire-${Date.now()}`
                url = await uploadPublicImage(file, path)
              }
            }
          } else {
            const uidSeg = slugifySegment(selectedWireDrop.uid)
            const path = `projects/${selectedProject.id}/wire_drops/${uidSeg}/prewire-${Date.now()}`
            url = await uploadPublicImage(file, path)
          }
          await supabase.from('wire_drops').update({ prewire_photo: url }).eq('id', selectedWireDrop.id)
          await loadWireDrops(selectedProject.id)
          setSelectedWireDrop(prev => prev ? { ...prev, prewirePhoto: url } : prev)
        } catch (err) {
          alert(`Upload failed: ${err.message}`)
        }
      }
      input.click()
    };

    const handleInstalledPhoto = async () => {
      const input = document.createElement('input')
      input.type = 'file'
      input.accept = 'image/*'
      input.capture = 'environment'
      input.onchange = async (e) => {
        let file = e.target.files?.[0]
        if (!file) return
        try {
          file = await compressImage(file)
          let url
          if (process.env.REACT_APP_USE_ONEDRIVE === '1' && selectedProject?.oneDrivePhotos) {
            const uidSeg = slugifySegment(selectedWireDrop.uid)
            const subPath = `wire_drops/${uidSeg}/installed`
            if (!navigator.onLine) {
              await enqueueUpload({ rootUrl: selectedProject.oneDrivePhotos, subPath, filename: file.name, contentType: file.type, blob: file, update: { type: 'wire_drop', field: 'installed_photo', id: selectedWireDrop.id } })
              url = URL.createObjectURL(file)
            } else {
              try {
                url = await graphUploadViaApi({ rootUrl: selectedProject.oneDrivePhotos, subPath, file })
              } catch (e) {
                const path = `projects/${selectedProject.id}/wire_drops/${uidSeg}/installed-${Date.now()}`
                url = await uploadPublicImage(file, path)
              }
            }
          } else {
            const uidSeg = slugifySegment(selectedWireDrop.uid)
            const path = `projects/${selectedProject.id}/wire_drops/${uidSeg}/installed-${Date.now()}`
            url = await uploadPublicImage(file, path)
          }
          await supabase.from('wire_drops').update({ installed_photo: url }).eq('id', selectedWireDrop.id)
          await loadWireDrops(selectedProject.id)
          setSelectedWireDrop(prev => prev ? { ...prev, installedPhoto: url } : prev)
        } catch (err) {
          alert(`Upload failed: ${err.message}`)
        }
      }
      input.click()
    };

    return (
      <div className={`min-h-screen ${t.bg}`}>
        {/* Header */}
        <div className={`${t.bgSecondary} border-b ${t.border} px-4 py-3`}>
          <div className="flex items-center justify-between">
            <button onClick={() => setCurrentView('wireDropList')} className={`p-2 ${t.text}`}>
              <ArrowLeft size={24} />
            </button>
            <h1 className={`text-lg font-semibold ${t.text}`}>Wire Drop Detail</h1>
            <button 
              onClick={() => {
                setCurrentView('wireDropForm');
              }}
              className={`p-2 ${t.text}`}
            >
              <Edit2 size={20} />
            </button>
          </div>
        </div>

        <div className="p-4">
          {/* Wire Info */}
          <div className={`mb-4 p-4 rounded-xl ${t.surface} border ${t.border}`}>
            <div className="grid grid-cols-2 gap-2 mb-3">
              <div>
                <p className={`text-xs ${t.textSecondary}`}>Name</p>
                <p className={`font-medium ${t.text}`}>{selectedWireDrop.name}</p>
              </div>
              <div>
                <p className={`text-xs ${t.textSecondary}`}>UID</p>
                <p className={`font-medium ${t.text}`}>{selectedWireDrop.uid}</p>
              </div>
              <div>
                <p className={`text-xs ${t.textSecondary}`}>Location</p>
                <p className={`font-medium ${t.text}`}>{selectedWireDrop.location}</p>
              </div>
              <div>
                <p className={`text-xs ${t.textSecondary}`}>Type</p>
                <p className={`font-medium ${t.text}`}>{selectedWireDrop.type}</p>
              </div>
            </div>
            
            {/* QR Code */}
            <div className="flex flex-col items-center gap-2">
              <div className="w-36 h-36 bg-white rounded-lg flex items-center justify-center p-2">
                {qrDataUrl ? (
                  <img src={qrDataUrl} alt={`QR for ${selectedWireDrop.uid}`} className="w-full h-full object-contain" />
                ) : (
                  <QrCode size={72} className="text-gray-800" />
                )}
              </div>
              {qrError && <span className="text-xs text-red-400">{qrError}</span>}
              <div className="flex gap-2">
                <button
                  onClick={() => {
                    navigator.clipboard?.writeText(selectedWireDrop.uid).catch(() => {});
                    alert('UID copied to clipboard');
                  }}
                  className={`px-3 py-1 rounded ${t.surfaceHover} ${t.text} text-xs`}
                >
                  Copy UID
                </button>
                <button
                  onClick={() => {
                    if (!qrDataUrl) return;
                    const link = document.createElement('a');
                    link.href = qrDataUrl;
                    link.download = `${selectedWireDrop.uid}.png`;
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                  }}
                  disabled={!qrDataUrl}
                  className={`px-3 py-1 rounded ${t.surfaceHover} ${t.text} text-xs ${!qrDataUrl ? 'opacity-50 cursor-not-allowed' : ''}`}
                >
                  Download QR
                </button>
              </div>
            </div>
          </div>

          {/* Status Cards */}
          <div className="grid grid-cols-2 gap-3 mb-4">
            <div className={`p-4 rounded-xl ${selectedWireDrop.prewirePhoto ? 'bg-yellow-600' : t.surface} border ${t.border}`}>
              <h3 className={`font-medium mb-2 ${selectedWireDrop.prewirePhoto ? 'text-white' : t.text}`}>
                Prewire {selectedWireDrop.prewirePhoto && '✓'}
              </h3>
              {selectedWireDrop.prewirePhoto ? (
                <div className="relative">
                  <img 
                    src={toThumb(selectedWireDrop.prewirePhoto)} 
                    alt="Prewire" 
                    className="w-full h-24 object-contain bg-black/20 rounded-lg mb-2 cursor-pointer" 
                    onClick={() => setFullscreenImage(selectedWireDrop.prewirePhoto)}
                    onError={(e) => { e.currentTarget.src = selectedWireDrop.prewirePhoto; }}
                  />
                  <button 
                    onClick={() => setFullscreenImage(selectedWireDrop.prewirePhoto)}
                    className="absolute top-1 right-1 p-1 bg-black/50 rounded-full text-white"
                  >
                    <Maximize size={12} />
                  </button>
                </div>
              ) : (
                <button 
                  onClick={handlePrewirePhoto}
                  className={`w-full h-24 rounded-lg ${t.surfaceHover} flex items-center justify-center`}
                >
                  <Camera size={24} className={t.textTertiary} />
                </button>
              )}
              <p className={`text-xs ${selectedWireDrop.prewirePhoto ? 'text-white' : t.textSecondary}`}>
                {selectedWireDrop.prewirePhoto ? 'Photo confirmed' : 'Add photo to confirm'}
              </p>
            </div>
            
            <div className={`p-4 rounded-xl ${selectedWireDrop.installedPhoto ? 'bg-green-600' : t.surface} border ${t.border}`}>
              <h3 className={`font-medium mb-2 ${selectedWireDrop.installedPhoto ? 'text-white' : t.text}`}>
                Installed {selectedWireDrop.installedPhoto && '✓'}
              </h3>
              {selectedWireDrop.installedPhoto ? (
                <div className="relative">
                  <img 
                    src={toThumb(selectedWireDrop.installedPhoto)} 
                    alt="Installed" 
                    className="w-full h-24 object-contain bg-black/20 rounded-lg mb-2 cursor-pointer" 
                    onClick={() => setFullscreenImage(selectedWireDrop.installedPhoto)}
                    onError={(e) => { e.currentTarget.src = selectedWireDrop.installedPhoto; }}
                  />
                  <button 
                    onClick={() => setFullscreenImage(selectedWireDrop.installedPhoto)}
                    className="absolute top-1 right-1 p-1 bg-black/50 rounded-full text-white"
                  >
                    <Maximize size={12} />
                  </button>
                </div>
              ) : (
                <button 
                  onClick={handleInstalledPhoto}
                  className={`w-full h-24 rounded-lg ${t.surfaceHover} flex items-center justify-center`}
                >
                  <Camera size={24} className={t.textTertiary} />
                </button>
              )}
              <p className={`text-xs ${selectedWireDrop.installedPhoto ? 'text-white' : t.textSecondary}`}>
                {selectedWireDrop.installedPhoto ? 'Photo confirmed' : 'Add photo to confirm'}
              </p>
            </div>
          </div>
        </div>
      </div>
    );
  };

  // Issue Detail View
  const IssueDetailView = () => {
    const [editedIssue, setEditedIssue] = useState(
      selectedIssue || { id: '', title: '', status: 'open', notes: '', photos: [], assignees: [] }
    );
    const [photoErr, setPhotoErr] = useState('')
    const [saveErr, setSaveErr] = useState('')
    const [savingIssue, setSavingIssue] = useState(false)

    if (!selectedIssue) return null;

    const addIssuePhoto = async () => {
      const input = document.createElement('input')
      input.type = 'file'
      input.accept = 'image/*'
      input.capture = 'environment'
      input.onchange = async (e) => {
        let file = e.target.files?.[0]
        if (!file) return
        try {
          file = await compressImage(file)
          setPhotoErr('')
          let url
          if (process.env.REACT_APP_USE_ONEDRIVE === '1' && selectedProject?.oneDrivePhotos) {
            const subPath = `issues/${editedIssue.id}`
            if (!navigator.onLine) {
              await enqueueUpload({ rootUrl: selectedProject.oneDrivePhotos, subPath, filename: file.name, contentType: file.type, blob: file, update: { type: 'issue_photo', issueId: editedIssue.id } })
              url = URL.createObjectURL(file)
            } else {
              try {
                url = await graphUploadViaApi({ rootUrl: selectedProject.oneDrivePhotos, subPath, file })
              } catch (e) {
                const path = `projects/${selectedProject.id}/issues/${editedIssue.id}/photo-${Date.now()}`
                url = await uploadPublicImage(file, path)
              }
            }
          } else {
            const path = `projects/${selectedProject.id}/issues/${editedIssue.id}/photo-${Date.now()}`
            url = await uploadPublicImage(file, path)
          }
          await supabase.from('issue_photos').insert([{ issue_id: editedIssue.id, url }])
          setIssues(prev => prev.map(i => i.id === editedIssue.id ? { ...i, photos: [...(i.photos||[]), url] } : i))
          setEditedIssue(prev => ({ ...prev, photos: [...(prev.photos||[]), url] }))
        } catch (err) {
          setPhotoErr(err.message)
        }
      }
      input.click()
    }

    const persistIssue = async (updates, successMessage) => {
      if (!supabase) { setSaveErr('Supabase not configured'); return; }
      if (!editedIssue?.id) { setSaveErr('Issue missing identifier'); return; }
      try {
        setSavingIssue(true);
        setSaveErr('');
        const { error } = await supabase
          .from('issues')
          .update(updates)
          .eq('id', editedIssue.id);
        if (error) throw error;
        setEditedIssue(prev => ({ ...prev, ...updates }));
        if (selectedProject?.id) {
          await loadIssues(selectedProject.id);
          await loadContactIssues(selectedProject.id);
        }
        alert(successMessage);
        setCurrentView('project');
      } catch (err) {
        setSaveErr(err.message || 'Unable to update issue');
      } finally {
        setSavingIssue(false);
      }
    };

    const saveIssue = async () => {
      await persistIssue({
        title: editedIssue.title,
        status: editedIssue.status,
        notes: editedIssue.notes
      }, 'Issue updated!');
    };

    const markResolved = async () => {
      await persistIssue({ status: 'resolved' }, 'Issue marked as resolved!');
    };

    return (
      <div className={`min-h-screen ${t.bg}`}>
        {/* Header */}
        <div className={`${t.bgSecondary} border-b ${t.border} px-4 py-3`}>
          <div className="flex items-center justify-between">
            <button onClick={() => setCurrentView('project')} className={`p-2 ${t.text}`}>
              <ArrowLeft size={24} />
            </button>
            <h1 className={`text-lg font-semibold ${t.text}`}>Issue Detail</h1>
            <button onClick={saveIssue} disabled={savingIssue} className={`p-2 ${t.accentText} ${savingIssue ? 'opacity-50 cursor-wait' : ''}`}>
              Save
            </button>
          </div>
        </div>

        <div className="p-4">
          {saveErr && <div className="text-sm text-red-400 mb-3">{saveErr}</div>}
          {/* Issue Title */}
          <div className={`mb-4 p-4 rounded-xl ${t.surface} border ${t.border}`}>
            <input
              type="text"
              value={editedIssue.title}
              onChange={(e) => setEditedIssue({...editedIssue, title: e.target.value})}
              className={`w-full px-3 py-2 rounded-lg ${t.surfaceHover} ${t.text} border ${t.border} font-medium`}
            />
          </div>

          {/* Status */}
          <div className="grid grid-cols-3 gap-2 mb-4">
            <button
              onClick={() => setEditedIssue({...editedIssue, status: 'open'})}
              className={`py-3 rounded-lg ${editedIssue.status === 'open' ? 'bg-orange-600 text-white' : `${t.surface} ${t.text}`} font-medium`}
            >
              Open
            </button>
            <button
              onClick={() => setEditedIssue({...editedIssue, status: 'blocked'})}
              className={`py-3 rounded-lg ${editedIssue.status === 'blocked' ? 'bg-red-600 text-white' : `${t.surface} ${t.text}`} font-medium`}
            >
              Blocked
            </button>
            <button
              onClick={() => setEditedIssue({...editedIssue, status: 'resolved'})}
              className={`py-3 rounded-lg ${editedIssue.status === 'resolved' ? 'bg-green-600 text-white' : `${t.surface} ${t.text}`} font-medium`}
            >
              Resolved
            </button>
          </div>

          <div className={`mb-4 p-4 rounded-xl ${t.surface} border ${t.border}`}>
            <h3 className={`font-medium ${t.text} mb-2`}>Assigned Stakeholders</h3>
            {editedIssue.assignees && editedIssue.assignees.length ? (
              <div className="space-y-2">
                {editedIssue.assignees.map(assign => (
                  <div key={assign.id} className={`text-sm ${t.text}`}>
                    <div className="font-medium">{assign.contact?.name || assign.contact?.email || 'Stakeholder'}</div>
                    <div className={`text-xs ${t.textSecondary}`}>
                      {assign.role?.name ? assign.role.name : '—'}
                      {assign.contact?.email ? ` · ${assign.contact.email}` : ''}
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <p className={`text-sm ${t.textSecondary}`}>No stakeholders tagged on this issue.</p>
            )}
          </div>

          {/* Notes */}
          <div className={`mb-4 p-4 rounded-xl ${t.surface} border ${t.border}`}>
            <h3 className={`font-medium ${t.text} mb-2`}>Notes</h3>
            <textarea
              value={editedIssue.notes}
              onChange={(e) => setEditedIssue({...editedIssue, notes: e.target.value})}
              className={`w-full px-3 py-2 rounded-lg ${t.surfaceHover} ${t.text} border ${t.border} h-32`}
              placeholder="Enter notes..."
            />
          </div>

          {/* Photos */}
          <div className={`mb-4 p-4 rounded-xl ${t.surface} border ${t.border}`}>
            <h3 className={`font-medium ${t.text} mb-2`}>Photos</h3>
            {photoErr && <div className="text-red-400 text-sm mb-2">{photoErr}</div>}
            <div className="flex gap-2 mb-3">
              <button onClick={addIssuePhoto} className={`px-3 py-2 rounded-lg ${t.accent} text-white text-sm`}>
                <Camera size={16} className="inline mr-1" /> Add Photo
              </button>
            </div>
            {(editedIssue.photos?.length>0) && (
              <div className="flex gap-2 overflow-x-auto">
                {editedIssue.photos.map((p, idx) => (
                  <img key={idx} src={toThumb(p)} alt={`issue-${idx}`} className="h-28 w-44 object-contain bg-black/20 rounded-lg cursor-pointer" onClick={() => setFullscreenImage(p)} onError={(e)=>{e.currentTarget.src=p}} />
                ))}
              </div>
            )}
          </div>

          {/* Action Button */}
          <button
            onClick={markResolved}
            disabled={editedIssue.status === 'resolved' || savingIssue}
            className={`w-full py-3 rounded-lg ${editedIssue.status === 'resolved' ? 'bg-gray-600' : 'bg-green-600'} text-white font-medium ${savingIssue ? 'opacity-50 cursor-wait' : ''}`}
          >
            {editedIssue.status === 'resolved' ? 'Already Resolved' : 'Mark as Resolved'}
          </button>
        </div>
      </div>
    );
  };

  // People/Contacts View
  const PeopleView = () => {
    const [form, setForm] = useState(getInitialContactForm())
    const [roleOptions, setRoleOptions] = useState([])
    const [search, setSearch] = useState('')
    const [issueSelections, setIssueSelections] = useState({})
    const [importingContacts, setImportingContacts] = useState(false)
    const [importError, setImportError] = useState('')
    const [internalSearch, setInternalSearch] = useState({})
    const [externalSearch, setExternalSearch] = useState({})
    const [internalPickerOpen, setInternalPickerOpen] = useState({})
    const [externalPickerOpen, setExternalPickerOpen] = useState({})
    const [showAddContactForm, setShowAddContactForm] = useState(false)
    const [showContactList, setShowContactList] = useState(false)

    const projectIssues = issues.filter(i => i.projectId === selectedProject?.id)
    const projectId = selectedProject?.id
    const stakeholderBundle = (projectId && projectStakeholders[projectId]) || { internal: [], external: [] }
    const internalAssignments = stakeholderBundle.internal || []
    const externalAssignments = stakeholderBundle.external || []
    const companyDefaultRoleNames = new Set(['Engineering', 'Accounting', 'Procurement'])
    const internalRoles = stakeholderRoles.filter(role => role.category === 'internal')
    const companyDefaultRoles = internalRoles.filter(role => companyDefaultRoleNames.has(role.name))
    const projectInternalRoles = internalRoles.filter(role => !companyDefaultRoleNames.has(role.name))
    const externalRoles = stakeholderRoles.filter(role => role.category === 'external')
    const defaultsByRole = stakeholderDefaults.reduce((acc, entry) => {
      if (!acc[entry.role_id]) acc[entry.role_id] = []
      acc[entry.role_id].push(entry)
      return acc
    }, {})
    const formatContactName = (contact) => contact?.name || contact?.email || 'Contact'
    const refreshStakeholders = async () => {
      if (!projectId) return
      await loadProjectStakeholders(projectId)
      await loadContactIssues(projectId)
    }

    useEffect(() => {
      const loadRoles = async () => {
        const { data, error } = await supabase.from('roles').select('*').eq('active', true).order('sort_order', {ascending:true})
        if (!error) setRoleOptions((data||[]).map(r => r.name))
      }
      loadRoles()
    }, [])

    useEffect(() => {
      setIssueSelections({})
    }, [projectId])

    const assignIssueToContact = async (contactId, issueId) => {
      if (!issueId || !contactId || !selectedProject?.id) return
      try {
        const { error } = await supabase
          .from('issue_contacts')
          .insert([{ project_id: selectedProject.id, issue_id: issueId, contact_id: contactId }])
        if (error) {
          const message = String(error.message || '')
          if (message.toLowerCase().includes('duplicate')) {
            alert('This person is already tagged on that issue.')
          } else {
            alert(message)
          }
          return
        }
        await loadContactIssues(selectedProject.id)
      } catch (err) {
        alert(err.message)
      } finally {
        setIssueSelections(prev => ({ ...prev, [contactId]: '' }))
      }
    }

    const unassignIssueFromContact = async (assignmentId) => {
      if (!assignmentId) return
      try {
        const { error } = await supabase
          .from('issue_contacts')
          .delete()
          .eq('id', assignmentId)
        if (error) {
          alert(error.message)
          return
        }
        if (selectedProject?.id) await loadContactIssues(selectedProject.id)
      } catch (err) {
        alert(err.message)
      }
    }

    const add = async () => {
      if (!projectId) {
        alert('Select a project first.');
        return;
      }
      const first = form.firstName.trim();
      const last = form.lastName.trim();
      const email = form.email.trim();
      if (!first && !last && !email) {
        alert('Provide a name or email for the contact.');
        return;
      }
      const fullName = [first, last].filter(Boolean).join(' ').trim();
      const payload = {
        project_id: projectId,
        first_name: first || null,
        last_name: last || null,
        name: fullName || email || 'Contact',
        role: form.role || null,
        email: email || null,
        phone: form.phone.trim() || null,
        company: form.company.trim() || null,
        address: form.address.trim() || null,
        report: form.report
      };
      const { error, data } = await supabase.from('contacts').insert([payload]).select('*').single()
      if (error) return alert(error.message)
      setContacts(prev => [...prev, data])
      setContactIssueMap(prev => ({ ...prev, [data.id]: [] }))
      setForm(getInitialContactForm())
      setShowAddContactForm(false)
      if (!showContactList) setShowContactList(true)
    }
    const toggleReport = async (c) => {
      const { error } = await supabase.from('contacts').update({ report: !c.report }).eq('id', c.id)
      if (error) return alert(error.message)
      setContacts(prev => prev.map(x => x.id === c.id ? { ...x, report: !c.report } : x))
    }
    const remove = async (c) => {
      if (!window.confirm('Delete contact?')) return
      const { error } = await supabase.from('contacts').delete().eq('id', c.id)
      if (error) return alert(error.message)
      setContacts(prev => prev.filter(x => x.id !== c.id))
      setIssueSelections(prev => {
        const next = { ...prev }
        delete next[c.id]
        return next
      })
      setContactIssueMap(prev => {
        const next = { ...prev }
        delete next[c.id]
        return next
      })
      if (selectedProject?.id) await loadContactIssues(selectedProject.id)
    }

    const handleAddDefault = async (role) => {
      if (!supabase) return
      const emailInput = (prompt(`Default email for ${role.name}?`, '') || '').trim()
      if (!emailInput) return
      const nameInput = (prompt(`Display name for ${role.name}`, '') || '').trim()
      try {
        const { error } = await supabase
          .from('stakeholder_defaults')
          .insert([{ role_id: role.id, email: emailInput, full_name: nameInput || null, is_internal: role.category === 'internal' }])
        if (error) throw error
        await loadStakeholderDefaults()
        if (projectId && window.confirm('Apply this default to the current project now?')) {
          await applyDefaultStakeholders(projectId)
        }
      } catch (err) {
        alert(err.message || 'Unable to add default')
      }
    }

    const handleRemoveDefault = async (defaultId) => {
      if (!window.confirm('Remove this default stakeholder?')) return
      const { error } = await supabase.from('stakeholder_defaults').delete().eq('id', defaultId)
      if (error) return alert(error.message)
      await loadStakeholderDefaults()
    }

    const toggleRoleAutoIssue = async (role) => {
      const { error } = await supabase
        .from('stakeholder_roles')
        .update({ auto_issue_default: !role.auto_issue_default })
        .eq('id', role.id)
      if (error) return alert(error.message)
      await loadStakeholderRoles()
    }

    const handleAssignInternal = async (role, contactId) => {
      if (!projectId || !contactId) return
      const contact = contacts.find(c => c.id === contactId)
      if (!contact) return
      try {
        const { error } = await supabase
          .from('project_internal_stakeholders')
          .upsert([{
            project_id: projectId,
            role_id: role.id,
            full_name: contact.name || null,
            email: contact.email || null,
            profile_id: null,
            is_primary: true
          }], { onConflict: 'project_id,role_id' })
        if (error) throw error
        await supabase
          .from('contacts')
          .update({ stakeholder_role_id: role.id, is_internal: true, is_primary: true })
          .eq('id', contactId)
        await refreshStakeholders()
        setInternalPickerOpen(prev => ({ ...prev, [role.id]: false }))
        setInternalSearch(prev => ({ ...prev, [role.id]: '' }))
      } catch (err) {
        alert(err.message || 'Unable to assign stakeholder')
      }
    }

    const handleCreateInternal = async (role, assignment) => {
      if (!projectId) return
      const nameInput = prompt(`Full name for ${role.name}`, assignment?.fullName || assignment?.contact?.name || '')
      if (nameInput === null) return
      const emailInput = prompt(`Email for ${role.name}`, assignment?.email || assignment?.contact?.email || '')
      if (emailInput === null) return
      const trimmedName = nameInput.trim()
      const trimmedEmail = emailInput.trim()
      try {
        const { error } = await supabase
          .from('project_internal_stakeholders')
          .upsert([{
            project_id: projectId,
            role_id: role.id,
            full_name: trimmedName || null,
            email: trimmedEmail || null,
            profile_id: assignment?.profileId || null,
            is_primary: assignment?.isPrimary ?? true
          }], { onConflict: 'project_id,role_id' })
        if (error) throw error
        await ensureProjectContact({
          projectId,
          roleId: role.id,
          fullName: trimmedName,
          email: trimmedEmail,
          isInternal: true,
          isPrimary: assignment?.isPrimary ?? true
        })
        await refreshStakeholders()
      } catch (err) {
        alert(err.message || 'Unable to update stakeholder')
      }
    }

    const handleRemoveInternal = async (assignment) => {
      if (!projectId || !assignment?.id) return
      if (!window.confirm('Remove this internal stakeholder?')) return
      const { error } = await supabase.from('project_internal_stakeholders').delete().eq('id', assignment.id)
      if (error) return alert(error.message)
      if (assignment.contactId) {
        await supabase
          .from('contacts')
          .update({ stakeholder_role_id: null, is_internal: false, is_primary: false })
          .eq('id', assignment.contactId)
      }
      await refreshStakeholders()
    }

    const handleToggleInternalPrimary = async (assignment) => {
      if (!projectId || !assignment?.id) return
      const nextValue = !assignment.isPrimary
      const { error } = await supabase
        .from('project_internal_stakeholders')
        .update({ is_primary: nextValue })
        .eq('id', assignment.id)
      if (error) return alert(error.message)
      if (assignment.contactId) {
        await supabase
          .from('contacts')
          .update({ is_primary: nextValue })
          .eq('id', assignment.contactId)
      }
      await refreshStakeholders()
    }

    const handleAssignExternal = async (role, contactId) => {
      if (!projectId || !contactId) return
      try {
        const { error } = await supabase
          .from('project_external_stakeholders')
          .upsert([{
            project_id: projectId,
            contact_id: contactId,
            role_id: role.id,
            is_primary: false
          }], { onConflict: 'project_id,contact_id,role_id' })
        if (error) throw error
        await refreshStakeholders()
        setExternalPickerOpen(prev => ({ ...prev, [role.id]: false }))
        setExternalSearch(prev => ({ ...prev, [role.id]: '' }))
      } catch (err) {
        alert(err.message || 'Unable to assign stakeholder')
      }
    }

    const handleRemoveExternal = async (assignment) => {
      if (!projectId || !assignment?.id) return
      if (!window.confirm('Remove this external stakeholder?')) return
      const { error } = await supabase
        .from('project_external_stakeholders')
        .delete()
        .eq('id', assignment.id)
      if (error) return alert(error.message)
      await refreshStakeholders()
    }

    const handleToggleExternalPrimary = async (assignment) => {
      if (!projectId || !assignment?.id) return
      const nextValue = !assignment.isPrimary
      const { error } = await supabase
        .from('project_external_stakeholders')
        .update({ is_primary: nextValue })
        .eq('id', assignment.id)
      if (error) return alert(error.message)
      if (assignment.contactId) {
        await supabase
          .from('contacts')
          .update({ is_primary: nextValue, stakeholder_role_id: assignment.roleId })
          .eq('id', assignment.contactId)
      }
      await refreshStakeholders()
    }

    const importFromMicrosoft = async () => {
      if (!projectId) { alert('Select a project first.'); return; }
      try {
        setImportingContacts(true)
        setImportError('')
        const { data: sessionData } = await supabase.auth.getSession()
        const access = sessionData?.session?.provider_token
        if (!access) {
          setImportingContacts(false)
          alert('Connect your Microsoft account to import contacts.')
          return
        }

        const existingEmails = new Set(
          contacts
            .map(c => (c.email || '').toLowerCase())
            .filter(Boolean)
        )

        let nextLink = 'https://graph.microsoft.com/v1.0/me/contacts?$top=200'
        const collected = []
        while (nextLink && collected.length < 400) {
          const resp = await fetch(nextLink, {
            headers: {
              Authorization: `Bearer ${access}`
            }
          })
          if (!resp.ok) {
            const text = await resp.text()
            throw new Error(text || 'Failed to fetch contacts from Microsoft')
          }
          const json = await resp.json()
          const batch = Array.isArray(json.value) ? json.value : []
          collected.push(...batch)
          nextLink = json['@odata.nextLink'] || null
        }

        const payloads = []
        const dedupe = new Set(existingEmails)

        collected.forEach(item => {
          const name = (item.displayName || '').trim()
          const email = (item.emailAddresses?.[0]?.address || '').trim()
          const emailKey = email.toLowerCase()
          if (!name && !email) return
          if (email && dedupe.has(emailKey)) return
          if (email) dedupe.add(emailKey)
          const phone = item.mobilePhone || item.businessPhones?.[0] || item.homePhones?.[0] || ''
          const role = item.jobTitle || ''
          const company = item.companyName || ''
          payloads.push({
            project_id: selectedProject.id,
            name: name || email || 'Contact',
            email: email || null,
            phone,
            role,
            company,
            report: false
          })
        })

        if (!payloads.length) {
          alert('No new contacts to import.')
          return
        }

        const { data, error } = await supabase
          .from('contacts')
          .insert(payloads)
          .select('*')
        if (error) throw error

        const inserted = data || []
        if (inserted.length) {
          setContacts(prev => [...prev, ...inserted])
          setContactIssueMap(prev => {
            const map = { ...prev }
            inserted.forEach(row => { map[row.id] = [] })
            return map
          })
          alert(`Imported ${inserted.length} contact${inserted.length === 1 ? '' : 's'} from Microsoft`)
        }
      } catch (err) {
        setImportError(err.message || 'Failed to import Microsoft contacts')
      } finally {
        setImportingContacts(false)
      }
    }

    return (
      <div className={`min-h-screen ${t.bg}`}>
        <div className={`${t.bgSecondary} border-b ${t.border} px-4 py-3`}>
          <div className="flex items-center justify-between">
            <button onClick={() => setCurrentView('project')} className={`p-2 ${t.text}`}>
              <ArrowLeft size={24} />
            </button>
            <h1 className={`text-lg font-semibold ${t.text}`}>People</h1>
            <div className="w-10" />
          </div>
        </div>

        <div className="p-4 space-y-4">
          {importError && <div className="text-sm text-red-400">{importError}</div>}

          {/* Stakeholder defaults */}
          <div className={`p-4 rounded-xl ${t.surface} border ${t.border}`}>
            <h3 className={`font-medium ${t.text} mb-3`}>Company Defaults</h3>
            <div className="space-y-3">
              <div>
                <h4 className={`text-sm font-semibold ${t.text} mb-2`}>Engineering · Accounting · Procurement</h4>
                {companyDefaultRoles.length === 0 && <p className={`text-xs ${t.textSecondary}`}>No company default roles configured.</p>}
                {companyDefaultRoles.map(role => {
                  const defaults = defaultsByRole[role.id] || []
                  return (
                    <div key={role.id} className={`mb-3 p-3 rounded-lg ${t.surfaceHover}`}>
                      <div className="flex items-start justify-between gap-2">
                        <div>
                          <p className={`font-medium ${t.text}`}>{role.name}</p>
                          {role.description && <p className={`text-xs ${t.textSecondary}`}>{role.description}</p>}
                        </div>
                        <div className="flex gap-2">
                          <button type="button" className={`px-2 py-1 text-xs rounded ${role.auto_issue_default ? 'bg-blue-600 text-white' : `${t.surface} ${t.text}`}`} onClick={() => toggleRoleAutoIssue(role)}>
                            {role.auto_issue_default ? 'Required' : 'Require'}
                          </button>
                          <button type="button" className={`px-2 py-1 text-xs rounded ${t.surface} ${t.text}`} onClick={() => handleAddDefault(role)}>
                            Add
                          </button>
                        </div>
                      </div>
                      <div className="mt-2 space-y-1">
                        {defaults.length === 0 && <p className={`text-xs ${t.textSecondary}`}>No defaults configured.</p>}
                        {defaults.map(def => (
                          <div key={def.id} className="flex items-center justify-between text-xs gap-2">
                            <div className={`${t.text}`}>{def.full_name || def.email || 'Stakeholder'} {def.email && <span className={`text-xs ${t.textSecondary}`}>({def.email})</span>}</div>
                            <button type="button" className={`px-2 py-0.5 rounded ${t.surfaceHover} ${t.text}`} onClick={() => handleRemoveDefault(def.id)}>Remove</button>
                          </div>
                        ))}
                      </div>
                    </div>
                  )
                })}
              </div>
              <div>
                <h4 className={`text-sm font-semibold ${t.text} mb-1`}>External</h4>
                <p className={`text-xs ${t.textSecondary}`}>External stakeholders are configured per project.</p>
              </div>
            </div>
          </div>

          {projectId && (
            <div className={`p-4 rounded-xl ${t.surface} border ${t.border}`}>
              <div className="flex items-center justify-between mb-3">
                <h3 className={`font-medium ${t.text}`}>Project Contacts</h3>
                <div className="flex items-center gap-2">
                  <button
                    type="button"
                    onClick={() => setShowAddContactForm(prev => !prev)}
                    className={`px-3 py-1 text-xs rounded ${t.surfaceHover} ${t.text} border ${t.border}`}
                  >
                    {showAddContactForm ? 'Hide Form' : 'Add Contact'}
                  </button>
                  <button
                    type="button"
                    onClick={() => setShowContactList(prev => {
                      const next = !prev;
                      if (!next) setSearch('');
                      return next;
                    })}
                    className={`px-3 py-1 text-xs rounded ${t.surfaceHover} ${t.text} border ${t.border}`}
                  >
                    {showContactList ? 'Hide Contacts' : 'View Contacts'}
                  </button>
                  <button
                    type="button"
                    onClick={importFromMicrosoft}
                    disabled={importingContacts}
                    className={`px-3 py-1 text-xs rounded ${t.surfaceHover} ${t.text} border ${t.border} ${importingContacts ? 'opacity-50 cursor-wait' : ''}`}
                  >
                    {importingContacts ? 'Importing…' : 'Import'}
                  </button>
                </div>
              </div>

              {showAddContactForm && (
                <div className={`p-3 rounded-lg ${t.surfaceHover} space-y-2`}>
                  <div className="grid grid-cols-2 gap-2">
                    <input className={`px-3 py-2 rounded ${t.surface} ${t.text} border ${t.border}`} placeholder="First name" value={form.firstName} onChange={e=>setForm({...form, firstName: e.target.value})} />
                    <input className={`px-3 py-2 rounded ${t.surface} ${t.text} border ${t.border}`} placeholder="Last name" value={form.lastName} onChange={e=>setForm({...form, lastName: e.target.value})} />
                    <div className="flex gap-2">
                      <select className={`flex-1 px-3 py-2 rounded ${t.surface} ${t.text} border ${t.border}`} value={form.role} onChange={e=>setForm({...form,role:e.target.value})}>
                        <option value="">Role</option>
                        {roleOptions.map(opt => <option key={opt} value={opt}>{opt}</option>)}
                      </select>
                      <button className={`px-2 rounded ${t.accent} text-white`} type="button" onClick={async()=>{
                        const name = (prompt('New role name:')||'').trim();
                        if (!name) return;
                        const { error } = await supabase.from('roles').insert([{ name }])
                        if (error) return alert(error.message)
                        setRoleOptions(prev => [...new Set([...prev, name])])
                        setForm({...form, role: name})
                      }}>+ Role</button>
                    </div>
                    <input className={`px-3 py-2 rounded ${t.surface} ${t.text} border ${t.border}`} placeholder="Email" value={form.email} onChange={e=>setForm({...form,email:e.target.value})} />
                    <input className={`px-3 py-2 rounded ${t.surface} ${t.text} border ${t.border}`} placeholder="Phone" value={form.phone} onChange={e=>setForm({...form,phone:e.target.value})} />
                    <input className={`px-3 py-2 rounded ${t.surface} ${t.text} border ${t.border}`} placeholder="Company" value={form.company} onChange={e=>setForm({...form,company:e.target.value})} />
                    <input className={`px-3 py-2 rounded ${t.surface} ${t.text} border ${t.border}`} placeholder="Address" value={form.address} onChange={e=>setForm({...form,address:e.target.value})} />
                    <label className={`text-sm ${t.text}`}><input type="checkbox" className="mr-2" checked={form.report} onChange={e=>setForm({...form,report:e.target.checked})} />Report</label>
                  </div>
                  <div className="text-right">
                    <button onClick={add} className={`px-3 py-2 rounded ${t.accent} text-white`}>Save Contact</button>
                  </div>
                </div>
              )}

              {showContactList && (
                <div className="mt-3 space-y-3">
                  <div className="relative">
                    <Search size={18} className={`absolute left-3 top-2.5 ${t.textSecondary}`} />
                    <input value={search} onChange={e=>setSearch(e.target.value)} placeholder="Search contacts..." className={`w-full pl-9 pr-3 py-2 rounded ${t.surfaceHover} ${t.text} border ${t.border}`} />
                  </div>

                  {contacts
                    .filter(c => (c.name||'').toLowerCase().includes(search.toLowerCase()) || (c.email||'').toLowerCase().includes(search.toLowerCase()) || (c.role||'').toLowerCase().includes(search.toLowerCase()))
                    .map(c => {
                      const stakeholderRole = c.stakeholder_role_id ? stakeholderRoles.find(role => role.id === c.stakeholder_role_id) : null;
                      const taggedIssues = contactIssueMap[c.id] || [];
                      return (
                        <div key={c.id} className={`p-3 rounded-xl ${t.surfaceHover} border ${t.border} flex items-center justify-between gap-4`}>
                          <div className="flex-1 min-w-0">
                            <div className={`${t.text} font-medium`}>{c.name}</div>
                            <div className={`text-xs ${t.textSecondary}`}>
                              {stakeholderRole ? stakeholderRole.name : c.role || ''}
                              {c.company ? ` · ${c.company}` : ''}
                              {c.is_internal ? ' · Internal' : ''}
                            </div>
                            <div className={`text-xs ${t.textSecondary}`}>{c.email || ''}{c.phone ? ` · ${c.phone}` : ''}</div>

                            {taggedIssues.length > 0 && (
                              <div className="mt-2 flex flex-wrap gap-2">
                                {taggedIssues.map(tag => (
                                  <span key={tag.assignmentId} className="text-xs bg-indigo-600/20 text-indigo-200 px-2 py-1 rounded-full flex items-center gap-1">
                                    {tag.title}
                                    <button
                                      onClick={() => unassignIssueFromContact(tag.assignmentId)}
                                      className="hover:text-white"
                                      title="Remove tag"
                                    >
                                      <X size={12} />
                                    </button>
                                  </span>
                                ))}
                              </div>
                            )}

                            <div className="mt-3 flex items-center gap-2">
                              <select
                                className={`px-3 py-1 rounded ${t.surfaceHover} ${t.text} border ${t.border} text-xs`}
                                value={issueSelections[c.id] || ''}
                                onChange={(e) => {
                                  const value = e.target.value;
                                  setIssueSelections(prev => ({ ...prev, [c.id]: value }));
                                  if (value) assignIssueToContact(c.id, value);
                                }}
                              >
                                <option value="">Tag on issue...</option>
                                {projectIssues.length === 0 && <option value="" disabled>No issues yet</option>}
                                {projectIssues.map(issue => (
                                  <option key={issue.id} value={issue.id}>{issue.title} ({issue.status})</option>
                                ))}
                              </select>
                            </div>
                          </div>
                          <div className="flex flex-col items-end gap-2">
                            <button onClick={() => toggleReport(c)} className={`px-3 py-1 rounded ${c.report ? 'bg-green-600 text-white' : `${t.surfaceHover} ${t.text}`}`}>Report {c.report ? '✓' : ''}</button>
                            <button onClick={() => remove(c)} className={`px-3 py-1 rounded ${t.surfaceHover} ${t.text}`}>Remove</button>
                          </div>
                        </div>
                      );
                    })}
                </div>
              )}
            </div>
          )}

          {projectId && (
            <div className={`p-4 rounded-xl ${t.surface} border ${t.border}`}>
              <h3 className={`font-medium ${t.text} mb-3`}>Internal Stakeholders</h3>
              {projectInternalRoles.length === 0 && <p className={`text-sm ${t.textSecondary}`}>No project roles configured.</p>}
              {projectInternalRoles.map(role => {
                const assignment = internalAssignments.find(item => item.roleId === role.id)
                const internalFilter = (internalSearch[role.id] || '').toLowerCase().trim()
                const availableInternalContacts = contacts
                  .filter(c => !internalAssignments.some(a => a.contactId === c.id))
                  .filter(c => {
                    if (!internalFilter) return true
                    const target = `${c.name || ''} ${c.email || ''}`.toLowerCase()
                    return target.includes(internalFilter)
                  })
                return (
                  <div key={role.id} className={`mb-3 p-3 rounded-lg ${t.surfaceHover}`}>
                    <div className="flex items-start justify-between gap-2">
                      <div>
                        <p className={`font-medium ${t.text}`}>{role.name}</p>
                        <p className={`text-xs ${t.textSecondary}`}>
                          {assignment ? (assignment.fullName || assignment.email || assignment.contact?.email || 'Stakeholder') : 'No one assigned yet.'}
                        </p>
                        {assignment?.email && <p className={`text-xs ${t.textSecondary}`}>{assignment.email}</p>}
                      </div>
                      <div className="flex gap-2">
                        {assignment && (
                          <button type="button" className={`px-2 py-1 text-xs rounded ${assignment.isPrimary ? 'bg-green-600 text-white' : `${t.surface} ${t.text}`}`} onClick={() => handleToggleInternalPrimary(assignment)}>
                            {assignment.isPrimary ? 'Primary' : 'Make Primary'}
                          </button>
                        )}
                        <button type="button" className={`px-2 py-1 text-xs rounded ${t.surface} ${t.text}`} onClick={() => handleCreateInternal(role, assignment)}>
                          {assignment ? 'Edit' : 'New Contact'}
                        </button>
                        {assignment && (
                          <button type="button" className={`px-2 py-1 text-xs rounded ${t.surface} ${t.text}`} onClick={() => handleRemoveInternal(assignment)}>Remove</button>
                        )}
                      </div>
                    </div>
                    <div className="mt-2 space-y-2">
                      <button
                        type="button"
                        className={`w-full px-2 py-1 text-xs rounded ${t.surface} ${t.text} border ${t.border}`}
                        onClick={() => setInternalPickerOpen(prev => {
                          const nextOpen = !prev[role.id];
                          if (!nextOpen) {
                            setInternalSearch(searchPrev => ({ ...searchPrev, [role.id]: '' }));
                          }
                          return { ...prev, [role.id]: nextOpen };
                        })}
                      >
                        {internalPickerOpen[role.id] ? 'Hide team list' : 'Assign existing contact'}
                      </button>
                      {internalPickerOpen[role.id] && (
                        <>
                          <input
                            type="text"
                            value={internalSearch[role.id] || ''}
                            onChange={(e) => setInternalSearch(prev => ({ ...prev, [role.id]: e.target.value }))}
                            placeholder="Search team members"
                            className={`w-full px-2 py-1 text-xs mb-2 rounded ${t.surface} ${t.text} border ${t.border}`}
                          />
                          <div className="max-h-40 overflow-y-auto space-y-1">
                            {availableInternalContacts.length === 0 ? (
                              <p className={`text-xs ${t.textSecondary}`}>No matching contacts.</p>
                            ) : (
                              availableInternalContacts.map(contact => (
                                <button
                                  key={contact.id}
                                  type="button"
                                  onClick={() => handleAssignInternal(role, contact.id)}
                                  className={`w-full text-left px-2 py-1 text-xs rounded ${t.surface} ${t.text} border border-transparent hover:border-blue-500`}
                                >
                                  {contact.name || contact.email || 'Contact'}
                                  {contact.email ? ` (${contact.email})` : ''}
                                </button>
                              ))
                            )}
                          </div>
                        </>
                      )}
                    </div>
                  </div>
                )
              })}
            </div>
          )}

          {projectId && (
            <div className={`p-4 rounded-xl ${t.surface} border ${t.border}`}>
              <h3 className={`font-medium ${t.text} mb-3`}>External Stakeholders</h3>
              {externalRoles.length === 0 && <p className={`text-sm ${t.textSecondary}`}>No external roles configured.</p>}
              {externalRoles.map(role => {
                const assignments = externalAssignments.filter(item => item.roleId === role.id)
                const externalFilter = (externalSearch[role.id] || '').toLowerCase().trim()
                const availableContacts = contacts
                  .filter(c => !assignments.some(a => a.contactId === c.id))
                  .filter(c => {
                    if (!externalFilter) return true
                    const target = `${c.name || ''} ${c.email || ''}`.toLowerCase()
                    return target.includes(externalFilter)
                  })
                return (
                  <div key={role.id} className={`mb-3 p-3 rounded-lg ${t.surfaceHover}`}>
                    <div className="flex items-start justify-between gap-2">
                      <div>
                        <p className={`font-medium ${t.text}`}>{role.name}</p>
                        {assignments.length === 0 && <p className={`text-xs ${t.textSecondary}`}>No contacts assigned.</p>}
                      </div>
                      <div className="flex flex-col gap-2">
                        <button
                          type="button"
                          className={`px-2 py-1 text-xs rounded ${t.surface} ${t.text} border ${t.border}`}
                          onClick={() => setExternalPickerOpen(prev => {
                            const nextOpen = !prev[role.id];
                            if (!nextOpen) {
                              setExternalSearch(searchPrev => ({ ...searchPrev, [role.id]: '' }));
                            }
                            return { ...prev, [role.id]: nextOpen };
                          })}
                        >
                          {externalPickerOpen[role.id] ? 'Hide contact list' : 'Assign existing contact'}
                        </button>
                        {externalPickerOpen[role.id] && (
                          <>
                            <input
                              type="text"
                              value={externalSearch[role.id] || ''}
                              onChange={(e) => setExternalSearch(prev => ({ ...prev, [role.id]: e.target.value }))}
                              placeholder="Search contacts"
                              className={`px-2 py-1 text-xs rounded ${t.surface} ${t.text} border ${t.border}`}
                            />
                            <div className="max-h-40 overflow-y-auto space-y-1">
                              {availableContacts.length === 0 ? (
                                <p className={`text-xs ${t.textSecondary}`}>No matching contacts.</p>
                              ) : (
                                availableContacts.map(contact => (
                                  <button
                                    key={contact.id}
                                    type="button"
                                    onClick={() => handleAssignExternal(role, contact.id)}
                                    className={`block w-full text-left px-2 py-1 text-xs rounded ${t.surface} ${t.text} border border-transparent hover:border-blue-500`}
                                  >
                                    {formatContactName(contact)}{contact.email ? ` (${contact.email})` : ''}
                                  </button>
                                ))
                              )}
                            </div>
                          </>
                        )}
                      </div>
                    </div>
                    <div className="mt-2 space-y-2">
                      {assignments.map(assignment => (
                        <div key={assignment.id} className={`flex items-center justify-between text-xs ${t.text}`}>
                          <div>
                            <div>{formatContactName(assignment.contact)}</div>
                            {assignment.contact?.email && <div className={`text-xs ${t.textSecondary}`}>{assignment.contact.email}</div>}
                          </div>
                          <div className="flex items-center gap-2">
                            <button type="button" className={`px-2 py-0.5 rounded ${assignment.isPrimary ? 'bg-green-600 text-white' : `${t.surface} ${t.text}`}`} onClick={() => handleToggleExternalPrimary(assignment)}>
                              {assignment.isPrimary ? 'Primary' : 'Make Primary'}
                            </button>
                            <button type="button" className={`px-2 py-0.5 rounded ${t.surface} ${t.text}`} onClick={() => handleRemoveExternal(assignment)}>Remove</button>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                )
              })}
            </div>
          )}

        </div>
      </div>
    )
  }

  // PM Dashboard
  const PMDashboard = () => (
    <div className={`min-h-screen ${t.bg}`}>
      {/* Header */}
      <div className={`${t.bgSecondary} border-b ${t.border} px-4 py-3`}>
        <div className="flex items-center justify-between">
          <h1 className={`text-lg font-semibold ${t.text}`}>Project Manager Dashboard</h1>
          <div className="flex items-center gap-2">
            <button onClick={() => setUserRole('technician')} className={`p-2 ${t.accentText} text-sm`}>
              Switch to Tech
            </button>
            <button onClick={() => setDarkMode(!darkMode)} className={`p-2 ${t.text}`}>
              {darkMode ? <Sun size={20} /> : <Moon size={20} />}
            </button>
          </div>
        </div>
      </div>

      {/* Stats */}
      <div className="p-4 grid grid-cols-2 gap-3">
        <div className={`p-4 rounded-xl ${t.surface} border ${t.border}`}>
          <p className={`text-xs ${t.textSecondary}`}>Active Projects</p>
          <p className={`text-2xl font-bold ${t.text}`}>{projects.length}</p>
        </div>
        <div className={`p-4 rounded-xl ${t.surface} border ${t.border}`}>
          <p className={`text-xs ${t.textSecondary}`}>Total Wire Drops</p>
          <p className={`text-2xl font-bold ${t.text}`}>
            {projects.reduce((sum, p) => sum + (p.wireDrops?.length || 0), 0)}
          </p>
        </div>
        <div className={`p-4 rounded-xl ${t.surface} border ${t.border}`}>
          <p className={`text-xs ${t.textSecondary}`}>Open Issues</p>
          <p className={`text-2xl font-bold ${t.text}`}>
            {issues.filter(i => i.status !== 'resolved').length}
          </p>
        </div>
        <div className={`p-4 rounded-xl ${t.surface} border ${t.border}`}>
          <p className={`text-xs ${t.textSecondary}`}>Team Members</p>
          <p className={`text-2xl font-bold ${t.text}`}>6</p>
        </div>
      </div>

      {/* Projects List */}
      <div className="px-4 pb-20">
        <div className="flex items-center justify-between mb-3">
          <h2 className={`text-lg font-semibold ${t.text}`}>Projects</h2>
          <button 
            onClick={() => {
              setSelectedProject(null);
              setCurrentView('projectForm');
            }}
            className={`p-2 ${t.accentText}`}
          >
            <Plus size={20} />
          </button>
        </div>
        
        {projects.map(project => {
          const progress = calculateProjectProgress(project);
          const openIssues = issues.filter(i => i.projectId === project.id && i.status !== 'resolved').length;
          
          return (
            <div key={project.id} className={`mb-3 p-4 rounded-xl ${t.surface} border ${t.border}`}>
              <div className="flex items-start justify-between mb-3">
                <div>
                  <p className={`font-medium ${t.text}`}>{project.name}</p>
                  <p className={`text-sm ${t.textSecondary}`}>{project.client}</p>
                  <p className={`text-xs ${t.textSecondary}`}>{project.address}</p>
                </div>
                <div className={`px-3 py-1 rounded-full text-xs font-medium ${
                  progress === 100 ? 'bg-green-600 text-white' :
                  progress > 50 ? 'bg-orange-600 text-white' :
                  'bg-red-600 text-white'
                }`}>
                  {progress}%
                </div>
              </div>
              
              {/* Progress Bar */}
              <div className="h-2 bg-gray-700 rounded-full mb-3">
                <div 
                  className={`h-full rounded-full ${
                    progress > 70 ? t.success : 
                    progress > 40 ? t.warning : 
                    t.danger
                  }`}
                  style={{ width: `${progress}%` }}
                />
              </div>
              
              {/* Quick Stats */}
              <div className="grid grid-cols-3 gap-2 mb-3">
                <div className={`p-2 rounded-lg ${t.surfaceHover} text-center`}>
                  <p className={`text-xs ${t.textSecondary}`}>Wire Drops</p>
                  <p className={`font-medium ${t.text}`}>{project.wireDrops?.length || 0}</p>
                </div>
                <div className={`p-2 rounded-lg ${t.surfaceHover} text-center`}>
                  <p className={`text-xs ${t.textSecondary}`}>Issues</p>
                  <p className={`font-medium ${openIssues > 0 ? 'text-red-500' : t.text}`}>{openIssues}</p>
                </div>
                <div className={`p-2 rounded-lg ${t.surfaceHover} text-center`}>
                  <p className={`text-xs ${t.textSecondary}`}>Team</p>
                  <p className={`font-medium ${t.text}`}>{project.team?.length || 0}</p>
                </div>
              </div>
              
              {/* Actions */}
              <div className="grid grid-cols-3 gap-2">
                <button 
                  onClick={() => {
                    setSelectedProject(project);
                    setCurrentView('pmProjectDetail');
                  }}
                  className={`py-2 rounded-lg ${t.surfaceHover} ${t.text} text-sm hover:${t.accentText}`}
                >
                  <Edit2 size={16} className="inline mr-1" />
                  Edit
                </button>
                <button 
                  onClick={() => {
                    // Generate and download report
                    alert('Report generation would be implemented here');
                  }}
                  className={`py-2 rounded-lg ${t.surfaceHover} ${t.text} text-sm hover:${t.accentText}`}
                >
                  <BarChart size={16} className="inline mr-1" />
                  Report
                </button>
                <button 
                  onClick={() => openLink(project.oneDriveFiles)}
                  className={`py-2 rounded-lg ${t.surfaceHover} ${t.text} text-sm hover:${t.accentText}`}
                >
                  <FolderOpen size={16} className="inline mr-1" />
                  Files
                </button>
              </div>
            </div>
          );
        })}
      </div>
    </div>
  );

  // PM Project Detail View
  const PMProjectDetail = () => {
    const [editableProject, setEditableProject] = useState(
      selectedProject || {
        id: '', name: '', client: '', address: '', phase: '',
        startDate: '', endDate: '', wiringDiagramUrl: '', portalProposalUrl: '',
        oneDrivePhotos: '', oneDriveFiles: '', oneDriveProcurement: '',
        stakeholders: [], team: [], wireDrops: []
      }
    );
    const [importingDrops, setImportingDrops] = useState(false);
    const [importSummary, setImportSummary] = useState(null);
    const [importError, setImportError] = useState('');

    if (!selectedProject) return null;

    const handleSave = () => {
      setProjects(prev => prev.map(p => p.id === editableProject.id ? editableProject : p));
      alert('Project updated!');
      setCurrentView('pmDashboard');
    };

    const sendWeeklyReport = () => {
      const recipients = (contacts || []).filter(c => c.report && c.email).map(c => c.email)
      if (!recipients.length) return alert('No report recipients configured in People')
      const subject = encodeURIComponent(`Project Report - ${editableProject?.name || ''} - ${new Date().toLocaleDateString()}`)
      const body = encodeURIComponent(`Summary for ${editableProject?.name || ''}\n\nOpen issues: ${(issues||[]).filter(i=>i.projectId===editableProject?.id && i.status!=='resolved').length}\n\nSent from Unicorn App`)
      window.location.href = `mailto:${recipients.join(',')}?subject=${subject}&body=${body}`
    };

    const handleImportWireDrops = () => {
      if (!editableProject?.id) {
        alert('Save the project before importing wire drops.');
        return;
      }
      if (!supabase) {
        setImportError('Supabase not configured');
        return;
      }
      const input = document.createElement('input');
      input.type = 'file';
      input.accept = '.csv';
      input.onchange = async (event) => {
        const file = event.target.files?.[0];
        if (!file) return;
        try {
          setImportingDrops(true);
          setImportError('');
          setImportSummary(null);
          const text = await file.text();
          const rows = parseWireDropCsv(text);
          if (!rows.length) {
            setImportError('No data rows found in the CSV file.');
            return;
          }
          const results = { success: 0, failed: 0, errors: [] };
          for (let index = 0; index < rows.length; index++) {
            const record = rows[index];
            const pick = (...names) => {
              for (const name of names) {
                const value = record[name];
                if (value !== undefined && value !== null && String(value).trim() !== '') {
                  return String(value).trim();
                }
              }
              return '';
            };
            const payload = {
              project_id: editableProject.id,
              uid: generateWireDropUid(),
              name: pick('name', 'wire drop name', 'drop name') || `Drop ${results.success + results.failed + 1}`,
              location: pick('location', 'loc', 'room') || 'Unspecified',
              type: pick('type', 'wire type') || 'CAT6',
              prewire_photo: pick('prewire photo', 'prewire', 'prewire_photo') || null,
              installed_photo: pick('installed photo', 'installed', 'installed_photo') || null,
            };

            let attempts = 0;
            let inserted = false;
            while (attempts < 2 && !inserted) {
              try {
                const { error } = await supabase
                  .from('wire_drops')
                  .insert([payload]);
                if (error) throw error;
                results.success += 1;
                inserted = true;
              } catch (err) {
                const message = String(err.message || '').toLowerCase();
                if (message.includes('duplicate') && attempts === 0) {
                  payload.uid = generateWireDropUid();
                  attempts += 1;
                } else {
                  results.failed += 1;
                  results.errors.push({ row: index + 1, message: err.message });
                  inserted = true;
                }
              }
            }
          }
          await loadWireDrops(editableProject.id);
          setImportSummary(results);
        } catch (err) {
          setImportError(err.message || 'Failed to import wire drops');
        } finally {
          setImportingDrops(false);
          event.target.value = '';
        }
      };
      input.click();
    };

    return (
      <div className={`min-h-screen ${t.bg}`}>
        {/* Header */}
        <div className={`${t.bgSecondary} border-b ${t.border} px-4 py-3`}>
          <div className="flex items-center justify-between">
            <button onClick={() => setCurrentView('pmDashboard')} className={`p-2 ${t.text}`}>
              <ArrowLeft size={24} />
            </button>
            <h1 className={`text-lg font-semibold ${t.text}`}>Project Details</h1>
            <button onClick={handleSave} className={`p-2 ${t.accentText}`}>
              <Save size={20} />
            </button>
          </div>
        </div>

        <div className="p-4">
          {/* Project Info */}
          <div className={`mb-4 p-4 rounded-xl ${t.surface} border ${t.border}`}>
            <h3 className={`font-medium ${t.text} mb-3`}>Project Information</h3>
            <div className="space-y-2">
              <input
                type="text"
                value={editableProject.name}
                onChange={(e) => setEditableProject({...editableProject, name: e.target.value})}
                className={`w-full px-3 py-2 rounded-lg ${t.surfaceHover} ${t.text} border ${t.border}`}
                placeholder="Project Name"
              />
              <input
                type="text"
                value={editableProject.client}
                onChange={(e) => setEditableProject({...editableProject, client: e.target.value})}
                className={`w-full px-3 py-2 rounded-lg ${t.surfaceHover} ${t.text} border ${t.border}`}
                placeholder="Client"
              />
              <input
                type="text"
                value={editableProject.address}
                onChange={(e) => setEditableProject({...editableProject, address: e.target.value})}
                className={`w-full px-3 py-2 rounded-lg ${t.surfaceHover} ${t.text} border ${t.border}`}
                placeholder="Address"
              />
            </div>
          </div>

          {/* Core Links */}
          <div className={`mb-4 p-4 rounded-xl ${t.surface} border ${t.border}`}>
            <h3 className={`font-medium ${t.text} mb-3`}>Core Project Links</h3>
            <div className="space-y-3">
              <div>
                <label className={`text-sm ${t.textSecondary} block mb-1`}>Wiring Diagram (Lucid Chart)</label>
                <div className="flex gap-2">
                  <input
                    type="url"
                    value={editableProject.wiringDiagramUrl}
                    onChange={(e) => setEditableProject({...editableProject, wiringDiagramUrl: e.target.value})}
                    className={`flex-1 px-3 py-2 rounded-lg ${t.surfaceHover} ${t.text} border ${t.border}`}
                    placeholder="Lucid Chart URL"
                  />
                  <button 
                    onClick={() => openLink(editableProject.wiringDiagramUrl)}
                    className={`px-3 py-2 rounded-lg ${t.accent} text-white`}
                  >
                    <ExternalLink size={16} />
                  </button>
                </div>
              </div>
              <div>
                <label className={`text-sm ${t.textSecondary} block mb-1`}>Portal Proposal</label>
                <div className="flex gap-2">
                  <input
                    type="url"
                    value={editableProject.portalProposalUrl}
                    onChange={(e) => setEditableProject({...editableProject, portalProposalUrl: e.target.value})}
                    className={`flex-1 px-3 py-2 rounded-lg ${t.surfaceHover} ${t.text} border ${t.border}`}
                    placeholder="Portal Proposal URL"
                  />
                  <button 
                    onClick={() => openLink(editableProject.portalProposalUrl)}
                    className={`px-3 py-2 rounded-lg ${t.accent} text-white`}
                  >
                    <ExternalLink size={16} />
                  </button>
                </div>
              </div>
            </div>
          </div>

          {/* OneDrive Integration */}
          <div className={`mb-4 p-4 rounded-xl ${t.surface} border ${t.border}`}>
            <h3 className={`font-medium ${t.text} mb-3`}>OneDrive Integration</h3>
            <div className="space-y-3">
              <div>
                <label className={`text-sm ${t.textSecondary} block mb-1`}>Photos Folder</label>
                <div className="flex gap-2">
                  <input
                    type="url"
                    value={editableProject.oneDrivePhotos}
                    onChange={(e) => setEditableProject({...editableProject, oneDrivePhotos: e.target.value})}
                    className={`flex-1 px-3 py-2 rounded-lg ${t.surfaceHover} ${t.text} border ${t.border}`}
                    placeholder="OneDrive Photos Folder URL"
                  />
                  <button 
                    onClick={() => openLink(editableProject.oneDrivePhotos)}
                    className={`px-3 py-2 rounded-lg ${t.accent} text-white`}
                  >
                    <ExternalLink size={16} />
                  </button>
                </div>
              </div>
              <div>
                <label className={`text-sm ${t.textSecondary} block mb-1`}>Files Folder</label>
                <div className="flex gap-2">
                  <input
                    type="url"
                    value={editableProject.oneDriveFiles}
                    onChange={(e) => setEditableProject({...editableProject, oneDriveFiles: e.target.value})}
                    className={`flex-1 px-3 py-2 rounded-lg ${t.surfaceHover} ${t.text} border ${t.border}`}
                    placeholder="OneDrive Files Folder URL"
                  />
                  <button 
                    onClick={() => openLink(editableProject.oneDriveFiles)}
                    className={`px-3 py-2 rounded-lg ${t.accent} text-white`}
                  >
                    <ExternalLink size={16} />
                  </button>
                </div>
              </div>
              <div>
                <label className={`text-sm ${t.textSecondary} block mb-1`}>Procurement Folder</label>
                <div className="flex gap-2">
                  <input
                    type="url"
                    value={editableProject.oneDriveProcurement}
                    onChange={(e) => setEditableProject({...editableProject, oneDriveProcurement: e.target.value})}
                    className={`flex-1 px-3 py-2 rounded-lg ${t.surfaceHover} ${t.text} border ${t.border}`}
                    placeholder="OneDrive Procurement Folder URL"
                  />
                  <button 
                    onClick={() => openLink(editableProject.oneDriveProcurement)}
                    className={`px-3 py-2 rounded-lg ${t.accent} text-white`}
                  >
                    <ExternalLink size={16} />
                  </button>
                </div>
              </div>
            </div>
          </div>

          {/* Wire Drops Management */}
          <div className={`mb-4 p-4 rounded-xl ${t.surface} border ${t.border}`}>
            <h3 className={`font-medium ${t.text} mb-3`}>Wire Drops ({editableProject.wireDrops?.length || 0})</h3>
            <div className="grid grid-cols-2 gap-2">
              <button 
                onClick={handleImportWireDrops}
                disabled={importingDrops}
                className={`py-2 rounded-lg ${t.surfaceHover} ${t.text} text-sm ${importingDrops ? 'opacity-50 cursor-wait' : ''}`}
              >
                <Upload size={16} className="inline mr-2" />
                {importingDrops ? 'Importing…' : 'Import CSV'}
              </button>
              <button 
                onClick={() => {
                  setSelectedProject(editableProject);
                  setCurrentView('wireDropList');
                }}
                className={`py-2 rounded-lg ${t.accent} text-white text-sm`}
              >
                <Zap size={16} className="inline mr-2" />
                Manage Drops
              </button>
            </div>
            {(importSummary || importError) && (
              <div className="mt-3 text-xs">
                {importError && <div className="text-red-400 mb-1">{importError}</div>}
                {importSummary && (
                  <div className={`${t.textSecondary}`}>
                    Imported {importSummary.success} drop{importSummary.success === 1 ? '' : 's'}{importSummary.failed ? `, ${importSummary.failed} failed` : ''}.
                    {importSummary.errors?.length ? (
                      <details className="mt-1">
                        <summary className="cursor-pointer">View errors</summary>
                        <ul className="list-disc pl-4">
                          {importSummary.errors.slice(0, 5).map((err, idx) => (
                            <li key={idx}>{`Row ${err.row}: ${err.message}`}</li>
                          ))}
                          {importSummary.errors.length > 5 && <li>+ {importSummary.errors.length - 5} more</li>}
                        </ul>
                      </details>
                    ) : null}
                  </div>
                )}
              </div>
            )}
          </div>

          {/* Stakeholder Report */}
          <div className={`mb-4 p-4 rounded-xl ${t.surface} border ${t.border}`}>
            <h3 className={`font-medium ${t.text} mb-3`}>Stakeholder Report</h3>
            <p className={`text-sm ${t.textSecondary} mb-3`}>
              Weekly report will include project progress, open issues, and completed items.
            </p>
            <div className="space-y-2 mb-3">
              {editableProject.stakeholders?.map((email, idx) => (
                <div key={idx} className={`px-3 py-2 rounded-lg ${t.surfaceHover} text-sm ${t.text} flex items-center justify-between`}>
                  <div className="flex items-center">
                    <Mail size={14} className="inline mr-2" />
                    {email}
                  </div>
                  <button 
                    onClick={() => {
                      const updated = {...editableProject};
                      updated.stakeholders = updated.stakeholders.filter((_, i) => i !== idx);
                      setEditableProject(updated);
                    }}
                    className="text-red-500"
                  >
                    <X size={14} />
                  </button>
                </div>
              ))}
            </div>
            <button 
              onClick={sendWeeklyReport}
              className={`w-full py-2 rounded-lg ${t.accent} text-white text-sm`}
            >
              <Send size={16} className="inline mr-2" />
              Send Weekly Report Now
            </button>
          </div>
        </div>
      </div>
    );
  };

  // Project Detail View (Technician)
  const ProjectDetailView = () => {
    const [newTodo, setNewTodo] = useState('');
    const [todoError, setTodoError] = useState('');
    const [addingTodo, setAddingTodo] = useState(false);
    const [updatingTodoId, setUpdatingTodoId] = useState(null);
    const [deletingTodoId, setDeletingTodoId] = useState(null);
    const [showCompletedTodos, setShowCompletedTodos] = useState(true);

    const todos = selectedProject?.todos || [];
    const openTodos = todos.filter(todo => !todo.completed).length;
    const visibleTodos = todos.filter(todo => showCompletedTodos || !todo.completed);
    const totalTodos = todos.length;
    const projectId = selectedProject?.id;

    useEffect(() => {
      setShowCompletedTodos(true);
      setNewTodo('');
      setTodoError('');
    }, [projectId]);

    const handleAddTodo = async () => {
      const title = newTodo.trim();
      if (!title || !selectedProject) return;
      if (!supabase) {
        setTodoError('Supabase not configured');
        return;
      }
      try {
        setAddingTodo(true);
        setTodoError('');
        const { data, error } = await supabase
          .from('project_todos')
          .insert([{ project_id: selectedProject.id, title }])
          .select()
          .single();
        if (error) throw error;
        const added = {
          id: data.id,
          projectId: data.project_id,
          title: data.title,
          completed: !!data.is_complete,
          createdAt: data.created_at
        };
        updateProjectTodos(selectedProject.id, [...todos, added]);
        setNewTodo('');
      } catch (e) {
        setTodoError(e.message);
      } finally {
        setAddingTodo(false);
      }
    };

    const toggleTodoCompletion = async (todo) => {
      if (!supabase || !selectedProject) {
        setTodoError('Supabase not configured');
        return;
      }
      try {
        setUpdatingTodoId(todo.id);
        setTodoError('');
        const { error } = await supabase
          .from('project_todos')
          .update({ is_complete: !todo.completed })
          .eq('id', todo.id);
        if (error) throw error;
        const updated = todos.map(t => t.id === todo.id ? { ...t, completed: !todo.completed } : t);
        updateProjectTodos(selectedProject.id, updated);
      } catch (e) {
        setTodoError(e.message);
      } finally {
        setUpdatingTodoId(null);
      }
    };

    const handleDeleteTodo = async (todoId) => {
      if (!supabase || !selectedProject) {
        setTodoError('Supabase not configured');
        return;
      }
      try {
        setDeletingTodoId(todoId);
        setTodoError('');
        const { error } = await supabase
          .from('project_todos')
          .delete()
          .eq('id', todoId);
        if (error) throw error;
        const updated = todos.filter(t => t.id !== todoId);
        updateProjectTodos(selectedProject.id, updated);
      } catch (e) {
        setTodoError(e.message);
      } finally {
        setDeletingTodoId(null);
      }
    };

    return (
      <div className={`min-h-screen ${t.bg}`}>
        {/* Header */}
        <div className={`${t.bgSecondary} border-b ${t.border} px-4 py-3`}>
          <div className="flex items-center justify-between">
            <button onClick={() => setCurrentView('dashboard')} className={`px-4 py-2 rounded-lg border ${t.border} ${t.text} font-medium flex items-center gap-2`}>
              <ArrowLeft size={18} />
              Back
            </button>
            <div className={`text-xs font-bold ${t.accentText}`}>
              INTELLIGENT<br/>SYSTEMS
            </div>
          </div>
        </div>

        {selectedProject && (
          <>
            {/* Project Progress */}
            <div className="p-4">
              <div className={`rounded-xl overflow-hidden ${t.surface} border ${t.border}`}>
                <div className="relative h-14">
                  <div 
                    className={`absolute inset-0 ${
                      calculateProjectProgress(selectedProject) > 70 ? t.success : 
                      calculateProjectProgress(selectedProject) > 40 ? t.warning : 
                      t.danger
                    } opacity-90`}
                    style={{ width: `${calculateProjectProgress(selectedProject)}%` }}
                  />
                  <div className={`absolute inset-0 flex items-center justify-center font-semibold ${t.text}`}>
                    {selectedProject.name} - {calculateProjectProgress(selectedProject)}%
                  </div>
                </div>
              </div>
            </div>

            {/* Sections */}
            <div className="px-4 pb-20">
              {/* Wiring Diagram */}
              <button
                type="button"
                onClick={() => openLink(selectedProject.wiringDiagramUrl)}
                className={`w-full mb-2 p-4 rounded-xl ${t.surface} border ${t.border} flex items-center justify-between`}
              >
                <div className="flex items-center gap-3">
                  <FileText size={20} className={t.textSecondary} />
                  <span className={`font-medium ${t.text}`}>Wiring Diagram</span>
                </div>
                <ExternalLink size={20} className={t.textSecondary} />
              </button>

              {/* Portal Proposal */}
              <button
                type="button"
                onClick={() => openLink(selectedProject.portalProposalUrl)}
                className={`w-full mb-2 p-4 rounded-xl ${t.surface} border ${t.border} flex items-center justify-between`}
              >
                <div className="flex items-center gap-3">
                  <FileText size={20} className={t.textSecondary} />
                  <span className={`font-medium ${t.text}`}>Portal Proposal</span>
                </div>
                <ExternalLink size={20} className={t.textSecondary} />
              </button>

              {/* Wire Drops */}
              <button 
                type="button"
                onClick={() => toggleSection('wireDrops')}
                className={`w-full mb-2 p-4 rounded-xl ${t.surface} border ${t.border} flex items-center justify-between`}
              >
                <div className="flex items-center gap-3">
                  <Zap size={20} className={t.textSecondary} />
                  <span className={`font-medium ${t.text}`}>Wire Drops</span>
                  <span className={`px-2 py-1 rounded-full text-xs ${t.accent} text-white`}>
                    {selectedProject.wireDrops?.length || 0}
                  </span>
                </div>
                <ChevronRight size={20} className={`${t.textSecondary} transition-transform ${expandedSections.wireDrops ? 'rotate-90' : ''}`} />
              </button>

              {expandedSections.wireDrops && (
                <div className={`mb-2 p-4 rounded-xl ${t.surface} border ${t.border} space-y-3`}>
                  {(!selectedProject.wireDrops || selectedProject.wireDrops.length === 0) && (
                    <p className={`text-sm ${t.textSecondary}`}>No wire drops yet. Add one below.</p>
                  )}
                  {(selectedProject.wireDrops || []).map(drop => {
                    const prewireComplete = !!drop.prewirePhoto;
                    const installComplete = !!drop.installedPhoto;
                    const completion = (prewireComplete ? 50 : 0) + (installComplete ? 50 : 0);
                    return (
                      <div
                        key={drop.id}
                        role="button"
                        tabIndex={0}
                        onClick={() => {
                          setSelectedWireDrop(drop);
                          setCurrentView('wireDropDetail');
                        }}
                        onKeyDown={(event) => {
                          if (event.key === 'Enter' || event.key === ' ') {
                            event.preventDefault();
                            setSelectedWireDrop(drop);
                            setCurrentView('wireDropDetail');
                          }
                        }}
                        className={`p-3 rounded-lg ${t.surfaceHover} cursor-pointer transition hover:${t.accentText}`}
                      >
                        <div className="flex items-center justify-between mb-2 gap-3">
                          <div>
                            <p className={`font-medium ${t.text}`}>{drop.name}</p>
                            <p className={`text-xs ${t.textSecondary}`}>{drop.location}</p>
                          </div>
                          <span className={`text-xs px-2 py-1 rounded-full ${t.mutedBg} ${t.text}`}>{drop.uid}</span>
                        </div>
                        <div className={`flex items-center justify-between text-xs ${t.textSecondary}`}>
                          <div className="flex gap-2">
                            <span className={`px-2 py-0.5 rounded ${prewireComplete ? 'bg-green-600 text-white' : `${t.mutedBg} ${t.textSecondary}`}`}>Prewire</span>
                            <span className={`px-2 py-0.5 rounded ${installComplete ? 'bg-green-600 text-white' : `${t.mutedBg} ${t.textSecondary}`}`}>Install</span>
                          </div>
                          <span className={`font-semibold ${t.text}`}>{completion}%</span>
                        </div>
                      </div>
                    );
                  })}
                  <div className="flex gap-2">
                    <button
                      type="button"
                      onClick={() => {
                        setSelectedWireDrop(null);
                        setCurrentView('wireDropForm');
                      }}
                      className={`flex-1 px-3 py-2 rounded-lg ${t.accent} text-white text-sm`}
                    >
                      Add Wire Drop
                    </button>
                    <button
                      type="button"
                      onClick={() => setCurrentView('wireDropList')}
                      className={`px-3 py-2 rounded-lg ${t.surfaceHover} ${t.text} text-sm border ${t.border}`}
                    >
                      Full List
                    </button>
                  </div>
                </div>
              )}

              {/* To-dos */}
              <button
                type="button"
                onClick={() => toggleSection('todos')}
                className={`w-full mb-2 p-4 rounded-xl ${t.surface} border ${t.border} flex items-center justify-between`}
              >
                <div className="flex items-center gap-3">
                  <ListTodo size={20} className={t.textSecondary} />
                  <span className={`font-medium ${t.text}`}>To-do List</span>
                  {openTodos > 0 && (
                    <span className="px-2 py-0.5 bg-orange-500 text-white text-xs rounded-full">
                      {openTodos} open
                    </span>
                  )}
                </div>
                <ChevronRight size={20} className={`${t.textSecondary} transition-transform ${expandedSections.todos ? 'rotate-90' : ''}`} />
              </button>

              {expandedSections.todos && (
                <div className={`mb-2 p-4 rounded-xl ${t.surface} border ${t.border}`}>
                  <div className="flex items-center gap-2 mb-3">
                    <input
                      type="text"
                      value={newTodo}
                      onChange={(e) => setNewTodo(e.target.value)}
                      onKeyDown={(e) => {
                        if (e.key === 'Enter') {
                          e.preventDefault();
                          handleAddTodo();
                        }
                      }}
                      placeholder="Add a new task..."
                      className={`flex-1 px-3 py-2 rounded-lg ${t.surfaceHover} ${t.text} border ${t.border}`}
                    />
                    <button
                      onClick={handleAddTodo}
                      disabled={addingTodo || !newTodo.trim()}
                      className={`p-2 rounded-lg ${addingTodo || !newTodo.trim() ? 'opacity-50 cursor-not-allowed' : `${t.accent} text-white`}`}
                    >
                      <Plus size={20} />
                    </button>
                  </div>
                  <div className="flex items-center justify-between mb-3">
                    <span className={`text-xs ${t.textSecondary}`}>
                      {totalTodos === 0 ? 'No tasks yet' : `${openTodos} open • ${totalTodos} total`}
                    </span>
                    {totalTodos > 0 && (
                      <button
                        onClick={() => setShowCompletedTodos(prev => !prev)}
                        className={`flex items-center gap-1 px-2 py-1 rounded ${t.surfaceHover} ${t.text} text-xs border ${t.border}`}
                      >
                        {showCompletedTodos ? <EyeOff size={14} /> : <Eye size={14} />}
                        <span>{showCompletedTodos ? 'Hide completed' : 'Show completed'}</span>
                      </button>
                    )}
                  </div>
                  {todoError && <div className="text-xs text-red-400 mb-3">{todoError}</div>}
                  <div className="space-y-2">
                    {totalTodos === 0 ? (
                      <p className={`text-sm ${t.textSecondary}`}>No tasks yet. Add your first item above.</p>
                    ) : visibleTodos.length === 0 ? (
                      <p className={`text-sm ${t.textSecondary}`}>All tasks are complete. Great job!</p>
                    ) : (
                      visibleTodos.map(todo => (
                        <div
                          key={todo.id}
                          className={`flex items-center gap-3 px-3 py-2 rounded-lg ${t.surfaceHover}`}
                        >
                          <button
                            onClick={() => toggleTodoCompletion(todo)}
                            disabled={updatingTodoId === todo.id}
                            className={`p-1 rounded ${updatingTodoId === todo.id ? 'opacity-50 cursor-wait' : ''}`}
                          >
                            {todo.completed ? (
                              <CheckSquare size={18} className="text-green-400" />
                            ) : (
                              <Square size={18} className={t.textSecondary} />
                            )}
                          </button>
                          <span className={`flex-1 text-sm ${todo.completed ? 'line-through opacity-70' : t.text}`}>
                            {todo.title}
                          </span>
                          <button
                            onClick={() => handleDeleteTodo(todo.id)}
                            disabled={deletingTodoId === todo.id}
                            className={`p-1 rounded ${deletingTodoId === todo.id ? 'opacity-50 cursor-wait' : ''}`}
                          >
                            <Trash2 size={16} className={t.textSecondary} />
                          </button>
                        </div>
                      ))
                    )}
                  </div>
                </div>
              )}

              {/* Issues */}
              <button
                type="button"
                onClick={() => toggleSection('issues')}
                className={`w-full mb-2 p-4 rounded-xl ${t.surface} border ${t.border} flex items-center justify-between`}
              >
                <div className="flex items-center gap-3">
                  <AlertCircle size={20} className={t.textSecondary} />
                  <span className={`font-medium ${t.text}`}>Issues</span>
                  {issues.filter(i => i.projectId === selectedProject.id && i.status !== 'resolved').length > 0 && (
                    <span className="px-2 py-0.5 bg-red-500 text-white text-xs rounded-full">
                      {issues.filter(i => i.projectId === selectedProject.id && i.status !== 'resolved').length}
                    </span>
                  )}
                </div>
                <ChevronRight size={20} className={`${t.textSecondary} transition-transform ${expandedSections.issues ? 'rotate-90' : ''}`} />
              </button>
              
              {expandedSections.issues && (
                <div className={`mb-2 p-4 rounded-xl ${t.surface} border ${t.border}`}>
                  <div className="flex items-center justify-between mb-3">
                    <div className="flex items-center gap-2">
                      <button
                        onClick={() => setShowResolvedIssues(!showResolvedIssues)}
                        className={`text-sm ${t.textSecondary}`}
                      >
                        {showResolvedIssues ? <Eye size={16} /> : <EyeOff size={16} />}
                      </button>
                      <span className={`text-sm ${t.textSecondary}`}>
                        {showResolvedIssues ? 'Showing all' : 'Hiding resolved'}
                      </span>
                    </div>
                    <button 
                      onClick={() => setCurrentView('issueForm')}
                      className={`p-1 ${t.accentText}`}
                    >
                      <Plus size={20} />
                    </button>
                  </div>
                  
                  {issues
                    .filter(i => i.projectId === selectedProject.id)
                    .filter(i => showResolvedIssues || i.status !== 'resolved')
                    .map(issue => (
                      <div
                        key={issue.id}
                        role="button"
                        tabIndex={0}
                        onClick={() => {
                          setSelectedIssue(issue);
                          setCurrentView('issueDetail');
                        }}
                        onKeyDown={(event) => {
                          if (event.key === 'Enter' || event.key === ' ') {
                            event.preventDefault();
                            setSelectedIssue(issue);
                            setCurrentView('issueDetail');
                          }
                        }}
                        className={`w-full p-3 mb-2 rounded-lg ${t.surfaceHover} text-left cursor-pointer transition hover:${t.accentText}`}
                      >
                        <div className="flex items-start justify-between gap-3">
                          <div className="flex-1">
                            <p className={`font-medium ${t.text}`}>{issue.title}</p>
                            <p className={`text-xs ${t.textSecondary} mt-1`}>{issue.date}</p>
                          </div>
                          <div className="flex items-center gap-2">
                            <span className={`px-2 py-1 rounded text-xs text-white capitalize ${
                              issue.status === 'blocked' ? t.danger :
                              issue.status === 'open' ? t.warning :
                              t.success
                            }`}>
                              {issue.status}
                            </span>
                            <ChevronRight size={16} className={t.textSecondary} />
                          </div>
                        </div>
                      </div>
                    ))
                  }
                </div>
              )}

              {/* Files */}
              <div className="grid grid-cols-3 gap-2 mb-2">
                <button
                  onClick={() => openLink(selectedProject.oneDrivePhotos)}
                  className={`p-4 rounded-xl ${t.surface} border ${t.border} flex flex-col items-center`}
                >
                  <Image size={20} className={`${t.textSecondary} mb-1`} />
                  <span className={`text-xs ${t.text}`}>Photos</span>
                </button>
                <button
                  onClick={() => openLink(selectedProject.oneDriveFiles)}
                  className={`p-4 rounded-xl ${t.surface} border ${t.border} flex flex-col items-center`}
                >
                  <Folder size={20} className={`${t.textSecondary} mb-1`} />
                  <span className={`text-xs ${t.text}`}>Files</span>
                </button>
                <button
                  onClick={() => openLink(selectedProject.oneDriveProcurement)}
                  className={`p-4 rounded-xl ${t.surface} border ${t.border} flex flex-col items-center`}
                >
                  <Package size={20} className={`${t.textSecondary} mb-1`} />
                  <span className={`text-xs ${t.text}`}>Procurement</span>
                </button>
              </div>

              {/* People */}
              <button
                onClick={() => setCurrentView('people')}
                className={`w-full mb-2 p-4 rounded-xl ${t.surface} border ${t.border} flex items-center justify-between`}
              >
                <div className="flex items-center gap-3">
                  <Users size={20} className={t.textSecondary} />
                  <span className={`font-medium ${t.text}`}>Team & Contacts</span>
                </div>
                <ChevronRight size={20} className={t.textSecondary} />
              </button>
            </div>

            {/* Bottom Actions */}
            <div className={`fixed bottom-0 left-0 right-0 p-4 grid grid-cols-2 gap-2 border-t ${t.border} ${t.bgSecondary}`}>
              <button 
                onClick={() => {
                  const query = prompt('Search for:');
                  if (query) {
                    setSearchQuery(query);
                    setCurrentView('wireDropList');
                  }
                }}
                className={`py-3 rounded-lg ${t.surfaceHover} ${t.text} font-medium`}
              >
                Search
              </button>
              <button 
                onClick={() => setCurrentView('issueForm')}
                className={`py-3 rounded-lg ${t.surfaceHover} ${t.text} font-medium`}
              >
                New Issue
              </button>
            </div>
          </>
        )}
      </div>
    );
  };

  // Issue Form (simplified)
  const IssueForm = () => {
    const initialIssueState = {
      title: '',
      status: 'open',
      notes: '',
      photos: []
    };
    const [newIssue, setNewIssue] = useState(() => ({ ...initialIssueState }));
    const [savingIssue, setSavingIssue] = useState(false);
    const [issueError, setIssueError] = useState('');
    const projectId = selectedProject?.id;

    const contactOptions = projectId
      ? contacts
          .filter(c => c.project_id === projectId)
          .map(contact => {
            const role = stakeholderRoles.find(r => r.id === contact.stakeholder_role_id) || null;
            return {
              contactId: contact.id,
              contact,
              role,
              isRequired: !!role?.auto_issue_default
            };
          })
          .sort((a, b) => {
            const roleA = a.role?.name || '';
            const roleB = b.role?.name || '';
            if (roleA === roleB) {
              return (a.contact.name || a.contact.email || '').localeCompare(b.contact.name || b.contact.email || '');
            }
            return roleA.localeCompare(roleB);
          })
      : [];

    const defaultContactIds = contactOptions
      .filter(option => option.isRequired && option.contactId)
      .map(option => option.contactId);

    const [selectedStakeholderContacts, setSelectedStakeholderContacts] = useState(defaultContactIds);

    useEffect(() => {
      setSelectedStakeholderContacts(defaultContactIds);
    }, [defaultContactIds]);

    const toggleStakeholderContact = (contactId, locked) => {
      if (locked) return;
      setSelectedStakeholderContacts(prev => (
        prev.includes(contactId)
          ? prev.filter(id => id !== contactId)
          : [...prev, contactId]
      ));
    };

    const formatStakeholderName = (option) => option.contact?.name || option.contact?.email || 'Stakeholder';

    const resetForm = () => {
      newIssue.photos.forEach(p => {
        try { URL.revokeObjectURL(p.preview); } catch (_) {}
      });
      setNewIssue({ ...initialIssueState });
      setSelectedStakeholderContacts(defaultContactIds);
    };

    const saveIssue = async () => {
      if (!newIssue.title.trim()) {
        alert('Please enter an issue title');
        return;
      }
      if (!selectedProject?.id) {
        alert('No project selected');
        return;
      }
      if (!supabase) {
        alert('Supabase not configured');
        return;
      }

      try {
        setSavingIssue(true);
        setIssueError('');

        const { data: inserted, error } = await supabase
          .from('issues')
          .insert([{
            project_id: selectedProject.id,
            title: newIssue.title.trim(),
            status: newIssue.status,
            notes: newIssue.notes
          }])
          .select()
          .single();

        if (error) throw error;

        const issueId = inserted.id;

        for (const photo of newIssue.photos) {
          try {
            let file = photo.file;
            if (!file) continue;
            try {
              file = await compressImage(file);
            } catch (_) {}

            let url;
            if (process.env.REACT_APP_USE_ONEDRIVE === '1' && selectedProject?.oneDrivePhotos) {
              const subPath = `issues/${issueId}`;
              if (!navigator.onLine) {
                await enqueueUpload({
                  rootUrl: selectedProject.oneDrivePhotos,
                  subPath,
                  filename: file.name,
                  contentType: file.type,
                  blob: file,
                  update: { type: 'issue_photo', issueId }
                });
                url = photo.preview;
              } else {
                try {
                  url = await graphUploadViaApi({ rootUrl: selectedProject.oneDrivePhotos, subPath, file });
                } catch (err) {
                  const path = `projects/${selectedProject.id}/issues/${issueId}/photo-${Date.now()}`;
                  url = await uploadPublicImage(file, path);
                }
              }
            } else {
              const path = `projects/${selectedProject.id}/issues/${issueId}/photo-${Date.now()}`;
              url = await uploadPublicImage(file, path);
            }

            if (url) {
              await supabase.from('issue_photos').insert([{ issue_id: issueId, url }]);
            }
          } catch (photoErr) {
            console.error('Failed to upload issue photo', photoErr);
          }
        }

        if (selectedStakeholderContacts.length) {
          try {
            const rows = selectedStakeholderContacts.map(contactId => ({
              project_id: selectedProject.id,
              issue_id: issueId,
              contact_id: contactId
            }));
            await supabase.from('issue_contacts').insert(rows);
          } catch (assignErr) {
            console.error('Failed to assign issue stakeholders', assignErr);
          }
        }

        await loadIssues(selectedProject.id);
        await loadContactIssues(selectedProject.id);
        alert('Issue created!');
        resetForm();
        setCurrentView('project');
      } catch (err) {
        setIssueError(err.message || 'Failed to create issue');
      } finally {
        setSavingIssue(false);
      }
    };

    return (
      <div className={`min-h-screen ${t.bg}`}>
        {/* Header */}
        <div className={`${t.bgSecondary} border-b ${t.border} px-4 py-3`}>
          <div className="flex items-center justify-between">
            <button onClick={() => setCurrentView('project')} className={`p-2 ${t.text}`}>
              <ArrowLeft size={24} />
            </button>
            <h1 className={`text-lg font-semibold ${t.text}`}>Log Issue</h1>
            <button onClick={saveIssue} disabled={savingIssue} className={`p-2 ${t.accentText} ${savingIssue ? 'opacity-50 cursor-wait' : ''}`}>
              <Save size={20} />
            </button>
          </div>
        </div>

        <div className="p-4">
          {issueError && <div className="mb-3 text-sm text-red-400">{issueError}</div>}
          <input
            type="text"
            value={newIssue.title}
            onChange={(e) => setNewIssue({...newIssue, title: e.target.value})}
            className={`w-full px-3 py-3 rounded-lg ${t.surface} ${t.text} border ${t.border} mb-4`}
            placeholder="Issue Title"
          />
          
          <div className="grid grid-cols-3 gap-2 mb-4">
            <button
              onClick={() => setNewIssue({...newIssue, status: 'open'})}
              className={`py-8 rounded-lg ${newIssue.status === 'open' ? 'bg-orange-600 text-white' : `${t.surface} ${t.text}`}`}
            >
              Open
            </button>
            <button
              onClick={() => setNewIssue({...newIssue, status: 'blocked'})}
              className={`py-8 rounded-lg ${newIssue.status === 'blocked' ? 'bg-red-600 text-white' : `${t.surface} ${t.text}`}`}
            >
              Blocked
            </button>
            <button
              onClick={() => handlePhotoCapture((photo) => {
                if (!photo) return;
                setNewIssue(prev => ({ ...prev, photos: [...prev.photos, photo] }));
              })}
              className={`py-8 rounded-lg ${t.surface} ${t.text}`}
            >
              <Camera size={32} className="mx-auto" />
            </button>
          </div>

          {/* Stakeholder notifications */}
          <div className={`mb-4 p-4 rounded-xl ${t.surface} border ${t.border}`}>
            <h3 className={`font-medium ${t.text} mb-2`}>Notify Stakeholders</h3>
            {contactOptions.length === 0 ? (
              <p className={`text-sm ${t.textSecondary}`}>Assign stakeholders in the People tab to include them here.</p>
            ) : (
              <div className="space-y-2">
                {contactOptions.map(option => {
                  const locked = option.isRequired;
                  const isSelected = selectedStakeholderContacts.includes(option.contactId);
                  return (
                    <label key={option.contactId} className={`flex items-center gap-3 text-sm ${locked ? 'opacity-80' : ''}`}>
                      <input
                        type="checkbox"
                        checked={isSelected}
                        disabled={locked}
                        onChange={() => toggleStakeholderContact(option.contactId, locked)}
                      />
                      <div className="flex flex-col">
                        <span className={t.text}>{formatStakeholderName(option)}</span>
                        <span className={`text-xs ${t.textSecondary}`}>
                          {option.role?.name || 'Stakeholder'}
                          {option.contact?.email ? ` · ${option.contact.email}` : ''}
                        </span>
                      </div>
                      {locked && <span className="text-xs bg-blue-600 text-white px-2 py-0.5 rounded-full">Required</span>}
                    </label>
                  );
                })}
              </div>
            )}
          </div>

          <textarea
            value={newIssue.notes}
            onChange={(e) => setNewIssue({...newIssue, notes: e.target.value})}
            className={`w-full px-3 py-3 rounded-lg ${t.surface} ${t.text} border ${t.border} h-32`}
            placeholder="Notes..."
          />

          {/* Show added photos */}
          {newIssue.photos.length > 0 && (
            <div className="mt-4 grid grid-cols-2 gap-2">
              {newIssue.photos.map((photo, idx) => (
                <div key={idx} className="relative">
                  <img 
                    src={photo.preview} 
                    alt={`New issue ${idx + 1}`} 
                    className="w-full h-24 object-cover rounded-lg cursor-pointer" 
                    onClick={() => setFullscreenImage(photo.preview)}
                  />
                  <button 
                    onClick={() => setFullscreenImage(photo.preview)}
                    className="absolute top-1 left-1 p-1 bg-black/50 rounded-full text-white"
                  >
                    <Maximize size={12} />
                  </button>
                  <button 
                    onClick={() => {
                      try { URL.revokeObjectURL(photo.preview); } catch (_) {}
                      setNewIssue(prev => ({
                        ...prev,
                        photos: prev.photos.filter((_, i) => i !== idx)
                      }));
                    }}
                    className="absolute top-1 right-1 p-1 bg-red-500 rounded-full"
                  >
                    <X size={12} className="text-white" />
                  </button>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    );
  };

  // QR Scanner
  const closeScanner = useCallback(() => setShowScanner(false), []);

  const QRScanner = ({ onScan, onClose }) => {
    const [manualUid, setManualUid] = useState('');
    const [scanError, setScanError] = useState('');
    const videoRef = useRef(null);
    const streamRef = useRef(null);
    const rafRef = useRef(null);
    const barcodeSupported = typeof window !== 'undefined' && 'BarcodeDetector' in window;
    const detectorRef = useRef(null);

    useEffect(() => {
      if (!barcodeSupported || !onScan) return;
      let cancelled = false;
      const videoElement = videoRef.current;

      const start = async () => {
        try {
          const detector = new window.BarcodeDetector({ formats: ['qr_code'] });
          detectorRef.current = detector;
          const stream = await navigator.mediaDevices.getUserMedia({ video: { facingMode: 'environment' } });
          if (cancelled) {
            stream.getTracks().forEach(track => track.stop());
            return;
          }
          streamRef.current = stream;
          if (videoRef.current) {
            videoRef.current.srcObject = stream;
            await videoRef.current.play();
          }

          const detectFrame = async () => {
            if (!videoRef.current || !detectorRef.current) return;
            try {
              const codes = await detectorRef.current.detect(videoRef.current);
              if (codes.length) {
                const value = codes[0].rawValue;
                if (value) {
                  const success = await onScan(value);
                  if (success) {
                    onClose();
                    return;
                  }
                  setScanError('Wire drop not found for scanned code');
                }
              }
            } catch (_) {}
            rafRef.current = requestAnimationFrame(detectFrame);
          };

          detectFrame();
        } catch (err) {
          if (!cancelled) {
            setScanError(err.message || 'Unable to access camera for scanning');
          }
        }
      };

      start();

      return () => {
        cancelled = true;
        if (rafRef.current) cancelAnimationFrame(rafRef.current);
        if (videoElement) videoElement.pause();
        if (streamRef.current) streamRef.current.getTracks().forEach(track => track.stop());
      };
    }, [barcodeSupported, onScan, onClose]);

    const handleManualSubmit = async (event) => {
      event.preventDefault();
      const value = manualUid.trim();
      if (!value) {
        setScanError('Enter a UID to search');
        return;
      }
      const success = await onScan(value);
      if (success) {
        onClose();
      } else {
        setScanError('Wire drop not found for that UID');
      }
    };

    return (
      <div className="fixed inset-0 bg-black/80 flex items-center justify-center z-50 p-4">
        <div className={`${t.surface} rounded-2xl p-6 max-w-md w-full space-y-4`}>
          <h2 className={`text-xl font-semibold ${t.text}`}>Scan Wire Drop</h2>
          {barcodeSupported ? (
            <div className={`relative rounded-xl overflow-hidden ${t.surfaceHover}`}>
              <video ref={videoRef} className="w-full h-64 object-cover" muted playsInline />
              <div className="absolute inset-0 border-2 border-dashed border-white/40 rounded-xl pointer-events-none"></div>
            </div>
          ) : (
            <div className={`h-48 ${t.surfaceHover} rounded-xl flex items-center justify-center text-center px-4 ${t.textSecondary}`}>
              Camera-based QR scanning isn&apos;t supported on this device. You can still enter a UID manually below.
            </div>
          )}
          <form onSubmit={handleManualSubmit} className="space-y-2">
            <label className={`text-xs ${t.textSecondary} block`}>Enter UID manually</label>
            <div className="flex gap-2">
              <input
                value={manualUid}
                onChange={(e) => {
                  setManualUid(e.target.value.toUpperCase());
                  setScanError('');
                }}
                placeholder="WD-..."
                className={`flex-1 px-3 py-2 rounded ${t.surfaceHover} ${t.text} border ${t.border}`}
              />
              <button type="submit" className={`px-3 py-2 rounded ${t.accent} text-white`}>Go</button>
            </div>
          </form>
          {scanError && <div className="text-sm text-red-400">{scanError}</div>}
          <button 
            onClick={onClose}
            className={`w-full py-3 rounded-lg ${t.surfaceHover} ${t.text}`}
          >
            Close
          </button>
        </div>
      </div>
    );
  };

  const toggleSection = (section) => {
    setExpandedSections(prev => ({ ...prev, [section]: !prev[section] }));
  };

  useEffect(() => {
    if (currentView === 'project' && pendingSection) {
      setExpandedSections(prev => ({ ...prev, [pendingSection]: true }));
      setPendingSection(null);
    }
  }, [currentView, pendingSection]);

  useEffect(() => {
    if (currentView === 'people' && selectedProjectId) {
      loadContactIssues(selectedProjectId);
    }
  }, [currentView, selectedProjectId, loadContactIssues]);

  // Test read from Supabase (uses env table or input)

  const updateProjectTodos = useCallback((projectId, todos) => {
    setProjects(prev => prev.map(p => p.id === projectId ? { ...p, todos } : p));
    setSelectedProject(prev => prev && prev.id === projectId ? { ...prev, todos } : prev);
  }, []);

  const loadTodos = useCallback(async (projectId) => {
    try {
      if (!supabase) return;
      const { data, error } = await supabase
        .from('project_todos')
        .select('*')
        .eq('project_id', projectId)
        .order('created_at', { ascending: true });
      if (error) return;
      const todos = (data || []).map(row => ({
        id: row.id,
        projectId: row.project_id,
        title: row.title,
        completed: !!row.is_complete,
        createdAt: row.created_at
      }));
      updateProjectTodos(projectId, todos);
    } catch (_) {}
  }, [updateProjectTodos]);

  useEffect(() => {
    if ((currentView === 'project' || currentView === 'pmProjectDetail') && selectedProjectId) {
      loadTodos(selectedProjectId);
    }
  }, [currentView, selectedProjectId, loadTodos]);

  // Main Render
  return (
    <>
      {userRole === 'technician' ? (
        <>
          {currentView === 'dashboard' && <TechnicianDashboard />}
          {currentView === 'project' && <ProjectDetailView />}
          {currentView === 'wireDropList' && <WireDropListView />}
          {currentView === 'wireDropDetail' && <WireDropDetailView />}
          {currentView === 'wireDropForm' && <WireDropForm />}
          {currentView === 'issueDetail' && <IssueDetailView />}
          {currentView === 'issueForm' && <IssueForm />}
          {currentView === 'people' && <PeopleView />}
        </>
      ) : (
        <>
          {currentView === 'dashboard' && <PMDashboard />}
          {currentView === 'pmDashboard' && <PMDashboard />}
          {currentView === 'pmProjectDetail' && <PMProjectDetail />}
          {currentView === 'projectForm' && <ProjectForm />}
          {currentView === 'wireDropList' && <WireDropListView />}
          {currentView === 'wireDropForm' && <WireDropForm />}
        </>
      )}
      {showScanner && <QRScanner onClose={closeScanner} onScan={openWireDropByUid} />}
      <FullscreenImageModal />
    </>
  );
};

export default App;
